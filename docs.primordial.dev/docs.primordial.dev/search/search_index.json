{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Note the api automatically includes the bit and ffi libraries Location # scripts location: {csgo folder}/primordial/scripts libraries location: {csgo folder}/primordial/scripts/include note that you can only require luas from within the libraries location. Contributing # if you find bugs or any missing documentation feel free to create a thread in the \"bugs\" forum in the \"scripts\" section. if you want to contribute to the docs (e.g. by supplying examples) contact \"DucaRii\" or \"Classy\" on the forum.","title":"Getting Started"},{"location":"#location","text":"scripts location: {csgo folder}/primordial/scripts libraries location: {csgo folder}/primordial/scripts/include note that you can only require luas from within the libraries location.","title":"Location"},{"location":"#contributing","text":"if you find bugs or any missing documentation feel free to create a thread in the \"bugs\" forum in the \"scripts\" section. if you want to contribute to the docs (e.g. by supplying examples) contact \"DucaRii\" or \"Classy\" on the forum.","title":"Contributing"},{"location":"docs/","text":"API Functions # callbacks # add # Documentation # void callbacks.add(<enum> event_type, <function> callback, [optional] <string> event_name) Description # Registers an event with the specified callback, or optionally if using the EVENT enum allows for an additional argument specifying a certain event to be monitored (ex: \"player_death\") Example # callbacks . add ( e_callbacks . EVENT , on_event ) callbacks . add ( e_callbacks . EVENT , on_player_hurt , \"player_hurt\" ) client # find_pattern # Documentation # int client.find_pattern(<string> module_name, <string> pattern) Description # Returns the address of the specified pattern Note: Patterns are represented in an \"IDA-Style\" format Example # local pattern_result = client . find_pattern ( \"client.dll\" , \"55 15 ?? ?? ?? ??\" ) --ty ducaren get_fps # Documentation # int client.get_fps() Description # Returns the client's frames per second Example # print ( client . get_fps ()) -- prints out the current FPS get_tickrate # Documentation # int client.get_tickrate() Description # Returns the current server's tickrate Example # print ( string.format ( \"Current Server Tickrate: %d\" , client . get_tickrate ())) time_to_ticks # Documentation # int client.time_to_ticks(<float> time) Description # Converts time (in seconds) into csgo ticks Example # print ( client . time_to_ticks ( 1 )) -- prints 64 on a 64-tick server ticks_to_time # Documentation # float client.ticks_to_time(<int> ticks) Description # Converts csgo ticks into time (in seconds) Example # print ( client . ticks_to_time ( 64 )) -- prints 1 precache_model # Documentation # void client.precache_model(<string> name) Description # Adds model to level precache list Example # client . precache_model ( \"models/weapons/v_ak47beast.mdl\" ) random_float # Documentation # float client.random_float(<float> min, <float> max) Description # Returns a random float between min and max Example # print ( client . random_float ( 0.5 , 2.5 )) -- prints a random float between (0.5 - 2.5) random_int # Documentation # int client.random_int(<int> min, <int> max) Description # Returns a random int between min and max Example # print ( client . random_int ( 1 , 10 )) -- prints a random int between 1 and 10 debug_overlay # add_box # Documentation # void debug_overlay.add_box(...) Description # Placeholder Text Example # debug_overlay . add_box (...)","title":"API Functions"},{"location":"docs/#api-functions","text":"","title":"API Functions"},{"location":"docs/#callbacks","text":"","title":"callbacks"},{"location":"docs/#add","text":"","title":"add"},{"location":"docs/#documentation","text":"void callbacks.add(<enum> event_type, <function> callback, [optional] <string> event_name)","title":"Documentation"},{"location":"docs/#description","text":"Registers an event with the specified callback, or optionally if using the EVENT enum allows for an additional argument specifying a certain event to be monitored (ex: \"player_death\")","title":"Description"},{"location":"docs/#example","text":"callbacks . add ( e_callbacks . EVENT , on_event ) callbacks . add ( e_callbacks . EVENT , on_player_hurt , \"player_hurt\" )","title":"Example"},{"location":"docs/#client","text":"","title":"client"},{"location":"docs/#find_pattern","text":"","title":"find_pattern"},{"location":"docs/#documentation_1","text":"int client.find_pattern(<string> module_name, <string> pattern)","title":"Documentation"},{"location":"docs/#description_1","text":"Returns the address of the specified pattern Note: Patterns are represented in an \"IDA-Style\" format","title":"Description"},{"location":"docs/#example_1","text":"local pattern_result = client . find_pattern ( \"client.dll\" , \"55 15 ?? ?? ?? ??\" ) --ty ducaren","title":"Example"},{"location":"docs/#get_fps","text":"","title":"get_fps"},{"location":"docs/#documentation_2","text":"int client.get_fps()","title":"Documentation"},{"location":"docs/#description_2","text":"Returns the client's frames per second","title":"Description"},{"location":"docs/#example_2","text":"print ( client . get_fps ()) -- prints out the current FPS","title":"Example"},{"location":"docs/#get_tickrate","text":"","title":"get_tickrate"},{"location":"docs/#documentation_3","text":"int client.get_tickrate()","title":"Documentation"},{"location":"docs/#description_3","text":"Returns the current server's tickrate","title":"Description"},{"location":"docs/#example_3","text":"print ( string.format ( \"Current Server Tickrate: %d\" , client . get_tickrate ()))","title":"Example"},{"location":"docs/#time_to_ticks","text":"","title":"time_to_ticks"},{"location":"docs/#documentation_4","text":"int client.time_to_ticks(<float> time)","title":"Documentation"},{"location":"docs/#description_4","text":"Converts time (in seconds) into csgo ticks","title":"Description"},{"location":"docs/#example_4","text":"print ( client . time_to_ticks ( 1 )) -- prints 64 on a 64-tick server","title":"Example"},{"location":"docs/#ticks_to_time","text":"","title":"ticks_to_time"},{"location":"docs/#documentation_5","text":"float client.ticks_to_time(<int> ticks)","title":"Documentation"},{"location":"docs/#description_5","text":"Converts csgo ticks into time (in seconds)","title":"Description"},{"location":"docs/#example_5","text":"print ( client . ticks_to_time ( 64 )) -- prints 1","title":"Example"},{"location":"docs/#precache_model","text":"","title":"precache_model"},{"location":"docs/#documentation_6","text":"void client.precache_model(<string> name)","title":"Documentation"},{"location":"docs/#description_6","text":"Adds model to level precache list","title":"Description"},{"location":"docs/#example_6","text":"client . precache_model ( \"models/weapons/v_ak47beast.mdl\" )","title":"Example"},{"location":"docs/#random_float","text":"","title":"random_float"},{"location":"docs/#documentation_7","text":"float client.random_float(<float> min, <float> max)","title":"Documentation"},{"location":"docs/#description_7","text":"Returns a random float between min and max","title":"Description"},{"location":"docs/#example_7","text":"print ( client . random_float ( 0.5 , 2.5 )) -- prints a random float between (0.5 - 2.5)","title":"Example"},{"location":"docs/#random_int","text":"","title":"random_int"},{"location":"docs/#documentation_8","text":"int client.random_int(<int> min, <int> max)","title":"Documentation"},{"location":"docs/#description_8","text":"Returns a random int between min and max","title":"Description"},{"location":"docs/#example_8","text":"print ( client . random_int ( 1 , 10 )) -- prints a random int between 1 and 10","title":"Example"},{"location":"docs/#debug_overlay","text":"","title":"debug_overlay"},{"location":"docs/#add_box","text":"","title":"add_box"},{"location":"docs/#documentation_9","text":"void debug_overlay.add_box(...)","title":"Documentation"},{"location":"docs/#description_9","text":"Placeholder Text","title":"Description"},{"location":"docs/#example_9","text":"debug_overlay . add_box (...)","title":"Example"},{"location":"examples/","text":"","title":"Examples"},{"location":"intro/","text":"Writing your first script # Examples # Enemy Iteration local function paint_callback () local enemies_only = entity_list . get_players ( true ) -- get a table of enemies only (specified with true or false) for _ , enemy in pairs ( enemies_only ) do -- iterate through the enemies table if enemy : is_player () and enemy : is_alive () then -- check if they are a valid player and alive print ( string.format ( \"Enemy Name: %s\" enemy : get_name ())) -- print their name end end end callbacks . add ( e_callbacks . PAINT , paint_callback ) -- run on paint callback Local Player Sanity Checks local function paint_callback () local local_player = entity_list . get_local_player () if local_player == nil then return end if not local_player : is_player () or not local_player : is_alive () then return end --code here end","title":"Writing your first script"},{"location":"intro/#writing-your-first-script","text":"","title":"Writing your first script"},{"location":"intro/#examples","text":"","title":"Examples"},{"location":"types/","text":"API Types # Structs # color_t Args Description R Red (0-255) G Green (0-255) B Blue (0-255) A Alpha (0-255) --Lua Example local color_object = color_t ( 255 , 255 , 255 , 255 ) --Alternatively local color_object_new = color_t . new ( 255 , 255 , 255 , 255 ) --Both serve as constructors for the color object Enums # e_callbacks # e_callbacks Types PAINT EVENT --Callbacks Example local function callback_paint () print ( \"on paint callback\" ) end callbacks . add ( e_callbacks . PAINT , callback_paint ) e_fontflags # e_font_flags Types ADDITIVE ITALIC ANTIALIAS OUTLINE DROPSHADOW ROTARY GAUSSIANBLUR STRIKEOUT SYMBOL UNDERLINE --Lua Example local font_flag = e_font_flags . ANTIALIAS e_hitboxes # e_hitboxes Types HEAD NECK PELVIS BODY THORAX CHEST UPPER_CHEST RIGHT_THIGH LEFT_THIGH RIGHT_CALF LEFT_CALF RIGHT_FOOT LEFT_FOOT RIGHT_HAND LEFT_HAND RIGHT_UPPER_ARM RIGHT_FOREARM LEFT_UPPER_ARM LEFT_FOREARM --Lua Example local hitbox_chest = e_hitboxes . CHEST e_hitgroups # e_hitgroups Types GENERIC HEAD CHEST STOMACH LEFT_ARM RIGHT_ARM LEFT_LEG RIGHT_LEG NECK GEAR --Lua Example local hitgroup_head = e_hitgroups . HEAD e_latency_flows # e_latency_flows Types OUTGOING INCOMING COMBINED # --Lua Example local latency_outgoing = e_latence_flows . OUTGOING e_items # e_items WEAPON_DEAGLE WEAPON_ELITE WEAPON_FIVESEVEN WEAPON_GLOCK WEAPON_AK47 WEAPON_AUG WEAPON_AWP WEAPON_FAMAS WEAPON_G3SG1 WEAPON_GALILAR WEAPON_M249 WEAPON_M4A1 WEAPON_MAC10 WEAPON_P90 WEAPON_ZONE_REPULSOR WEAPON_MP5SD WEAPON_UMP45 WEAPON_XM1014 WEAPON_BIZON WEAPON_MAG7 WEAPON_NEGEV WEAPON_SAWEDOFF WEAPON_TEC9 WEAPON_TASER WEAPON_HKP2000 WEAPON_MP7 WEAPON_MP9 WEAPON_NOVA WEAPON_P250 WEAPON_SHIELD WEAPON_SCAR20 WEAPON_SG556 WEAPON_SSG08 WEAPON_KNIFEGG WEAPON_KNIFE WEAPON_FLASHBANG WEAPON_HEGRENADE WEAPON_SMOKEGRENADE WEAPON_MOLOTOV WEAPON_DECOY WEAPON_INCGRENADE WEAPON_C4 ITEM_KEVLAR ITEM_ASSAULTSUIT ITEM_HEAVYASSAULTSUIT ITEM_NVG ITEM_DEFUSER ITEM_CUTTERS WEAPON_HEALTHSHOT WEAPON_KNIFE_T WEAPON_M4A1_SILENCER WEAPON_USP_SILENCER WEAPON_CZ75A WEAPON_REVOLVER WEAPON_TAGRENADE WEAPON_FISTS WEAPON_BREACHCHARGE WEAPON_TABLET WEAPON_MELEE WEAPON_AXE WEAPON_HAMMER WEAPON_SPANNER WEAPON_KNIFE_GHOST WEAPON_FIREBOMB WEAPON_DIVERSION WEAPON_FRAG_GRENADE WEAPON_SNOWBALL WEAPON_BUMPMINE WEAPON_BAYONET WEAPON_KNIFE_CSS WEAPON_KNIFE_FLIP WEAPON_KNIFE_GUT WEAPON_KNIFE_KARAMBIT WEAPON_KNIFE_M9_BAYONET WEAPON_KNIFE_TACTICAL WEAPON_KNIFE_FALCHION WEAPON_KNIFE_SURVIVAL_BOWIE WEAPON_KNIFE_BUTTERFLY WEAPON_KNIFE_PUSH WEAPON_KNIFE_CORD WEAPON_KNIFE_CANIS WEAPON_KNIFE_URSUS WEAPON_KNIFE_GYPSY_JACKKNIFE WEAPON_KNIFE_OUTDOOR WEAPON_KNIFE_STILETTO WEAPON_KNIFE_WIDOWMAKER WEAPON_KNIFE_SKELETON T_GLOVES CT_GLOVES SPORTY_GLOVES SLICK_GLOVES LEATHER_HANDWRAPS MOTORCYCLE_GLOVES SPECIALIST_GLOVES STUDDED_HYDRA_GLOVES","title":"API Types"},{"location":"types/#api-types","text":"","title":"API Types"},{"location":"types/#structs","text":"color_t Args Description R Red (0-255) G Green (0-255) B Blue (0-255) A Alpha (0-255) --Lua Example local color_object = color_t ( 255 , 255 , 255 , 255 ) --Alternatively local color_object_new = color_t . new ( 255 , 255 , 255 , 255 ) --Both serve as constructors for the color object","title":"Structs"},{"location":"types/#enums","text":"","title":"Enums"},{"location":"types/#e_callbacks","text":"e_callbacks Types PAINT EVENT --Callbacks Example local function callback_paint () print ( \"on paint callback\" ) end callbacks . add ( e_callbacks . PAINT , callback_paint )","title":"e_callbacks"},{"location":"types/#e_fontflags","text":"e_font_flags Types ADDITIVE ITALIC ANTIALIAS OUTLINE DROPSHADOW ROTARY GAUSSIANBLUR STRIKEOUT SYMBOL UNDERLINE --Lua Example local font_flag = e_font_flags . ANTIALIAS","title":"e_fontflags"},{"location":"types/#e_hitboxes","text":"e_hitboxes Types HEAD NECK PELVIS BODY THORAX CHEST UPPER_CHEST RIGHT_THIGH LEFT_THIGH RIGHT_CALF LEFT_CALF RIGHT_FOOT LEFT_FOOT RIGHT_HAND LEFT_HAND RIGHT_UPPER_ARM RIGHT_FOREARM LEFT_UPPER_ARM LEFT_FOREARM --Lua Example local hitbox_chest = e_hitboxes . CHEST","title":"e_hitboxes"},{"location":"types/#e_hitgroups","text":"e_hitgroups Types GENERIC HEAD CHEST STOMACH LEFT_ARM RIGHT_ARM LEFT_LEG RIGHT_LEG NECK GEAR --Lua Example local hitgroup_head = e_hitgroups . HEAD","title":"e_hitgroups"},{"location":"types/#e_latency_flows","text":"e_latency_flows Types OUTGOING INCOMING COMBINED # --Lua Example local latency_outgoing = e_latence_flows . OUTGOING","title":"e_latency_flows"},{"location":"types/#e_items","text":"e_items WEAPON_DEAGLE WEAPON_ELITE WEAPON_FIVESEVEN WEAPON_GLOCK WEAPON_AK47 WEAPON_AUG WEAPON_AWP WEAPON_FAMAS WEAPON_G3SG1 WEAPON_GALILAR WEAPON_M249 WEAPON_M4A1 WEAPON_MAC10 WEAPON_P90 WEAPON_ZONE_REPULSOR WEAPON_MP5SD WEAPON_UMP45 WEAPON_XM1014 WEAPON_BIZON WEAPON_MAG7 WEAPON_NEGEV WEAPON_SAWEDOFF WEAPON_TEC9 WEAPON_TASER WEAPON_HKP2000 WEAPON_MP7 WEAPON_MP9 WEAPON_NOVA WEAPON_P250 WEAPON_SHIELD WEAPON_SCAR20 WEAPON_SG556 WEAPON_SSG08 WEAPON_KNIFEGG WEAPON_KNIFE WEAPON_FLASHBANG WEAPON_HEGRENADE WEAPON_SMOKEGRENADE WEAPON_MOLOTOV WEAPON_DECOY WEAPON_INCGRENADE WEAPON_C4 ITEM_KEVLAR ITEM_ASSAULTSUIT ITEM_HEAVYASSAULTSUIT ITEM_NVG ITEM_DEFUSER ITEM_CUTTERS WEAPON_HEALTHSHOT WEAPON_KNIFE_T WEAPON_M4A1_SILENCER WEAPON_USP_SILENCER WEAPON_CZ75A WEAPON_REVOLVER WEAPON_TAGRENADE WEAPON_FISTS WEAPON_BREACHCHARGE WEAPON_TABLET WEAPON_MELEE WEAPON_AXE WEAPON_HAMMER WEAPON_SPANNER WEAPON_KNIFE_GHOST WEAPON_FIREBOMB WEAPON_DIVERSION WEAPON_FRAG_GRENADE WEAPON_SNOWBALL WEAPON_BUMPMINE WEAPON_BAYONET WEAPON_KNIFE_CSS WEAPON_KNIFE_FLIP WEAPON_KNIFE_GUT WEAPON_KNIFE_KARAMBIT WEAPON_KNIFE_M9_BAYONET WEAPON_KNIFE_TACTICAL WEAPON_KNIFE_FALCHION WEAPON_KNIFE_SURVIVAL_BOWIE WEAPON_KNIFE_BUTTERFLY WEAPON_KNIFE_PUSH WEAPON_KNIFE_CORD WEAPON_KNIFE_CANIS WEAPON_KNIFE_URSUS WEAPON_KNIFE_GYPSY_JACKKNIFE WEAPON_KNIFE_OUTDOOR WEAPON_KNIFE_STILETTO WEAPON_KNIFE_WIDOWMAKER WEAPON_KNIFE_SKELETON T_GLOVES CT_GLOVES SPORTY_GLOVES SLICK_GLOVES LEATHER_HANDWRAPS MOTORCYCLE_GLOVES SPECIALIST_GLOVES STUDDED_HYDRA_GLOVES","title":"e_items"},{"location":"api_callbacks/AIMBOT_HIT/","text":"this callback is called whenever the ragebot hits a shot along with it an instance of a aimbot_hit_t is passed into the callback local function on_aimbot_hit ( hit ) print ( \"hit\" , hit . player : get_name (), \"for\" , hit . damage , \"hp\" ) end callbacks . add ( e_callbacks . AIMBOT_HIT , on_aimbot_hit )","title":"AIMBOT_HIT"},{"location":"api_callbacks/AIMBOT_MISS/","text":"this callback is called whenever the ragebot misses a shot along with it an instance of a aimbot_miss_t is passed into the callback local function on_aimbot_miss ( miss ) print ( \"missed\" , miss . player : get_name (), \"due to\" , miss . reason_string ) end callbacks . add ( e_callbacks . AIMBOT_MISS , on_aimbot_miss )","title":"AIMBOT_MISS"},{"location":"api_callbacks/AIMBOT_SHOOT/","text":"this callback is called whenever the ragebot fires a shot along with it an instance of a aimbot_shot_t is passed into the callback local function on_aimbot_shoot ( shot ) print ( \"shot at\" , shot . player : get_name (), \"with\" , shot . hitchance , \"hitchance\" ) end callbacks . add ( e_callbacks . AIMBOT_SHOOT , on_aimbot_shoot )","title":"AIMBOT_SHOOT"},{"location":"api_callbacks/ANTIAIM/","text":"this callback is called right before antiaim is run and allows to override various stuff passed into the callback is: an instance of the antiaim_context_t an immutable instance of the current user_cmd_t an immutable instance of the current unpredicted_data_t local function on_antiaim ( ctx ) -- force half-down pitch ctx : set_pitch ( 45 ) end callbacks . add ( e_callbacks . ANTIAIM , on_antiaim )","title":"ANTIAIM"},{"location":"api_callbacks/DRAW_MODEL/","text":"this callback is called right before a model is drawn and allows to override various stuff passed into the callback is: an instance of the model_context_t local glow_material = materials . create ( \"glow_material\" , [[ \"VertexLitGeneric\" { \"$additive\" \"1\" \"$envmap\" \"models/effects/cube_white\" \"$envmaptint\" \"[1 1 1]\" \"$envmapfresnel\" \"1\" \"$envmapfresnelminmaxexp\" \"[0 1 2]\" \"$alpha\" \"1.0\" } ]] ) function on_draw_model ( ctx ) if ctx . model_name : find ( \"weapons/v_\" ) == nil then return end ctx . override_original = true glow_material : set_shader_param ( \"$envmaptint\" , vec3_t ( 1 , 1 , 0 )) glow_material : set_shader_param ( \"$alpha\" , 0.3 ) ctx : draw_original () ctx : draw_material ( glow_material ) end callbacks . add ( e_callbacks . DRAW_MODEL , on_draw_model )","title":"DRAW_MODEL"},{"location":"api_callbacks/DRAW_WATERMARK/","text":"Info you can call all render.* functions inside of this callback this callback is called every time the hack renders the watermark, it can be used to either replace the text in the watermark or override it with a custom watermark local function on_draw_watermark ( watermark_text ) -- returning any string will override the watermark text return \"my custom watermark for \" .. user . name end callbacks . add ( e_callbacks . DRAW_WATERMARK , on_draw_watermark ) if you want to remove the original watermark and replace it with your own, you can return an empty string local function on_draw_watermark ( watermark_text ) -- draw custom watermark here -- render.rect_filled(vec2_t(500, 0), vec2_t(50, 14), color_t(10, 10, 10, 50)) -- return an empty string to prevent the original watermark from drawing return \"\" end callbacks . add ( e_callbacks . DRAW_WATERMARK , on_draw_watermark )","title":"DRAW_WATERMARK"},{"location":"api_callbacks/EVENT/","text":"this callback is called every time csgo fires an event, along with it the event object is passed. you can get a list of all events and their fields here local function on_event ( event ) print ( \"received event\" , event . name ) -- only react to specific events if event . name == \"player_death\" then -- all fields can be found here: https://wiki.alliedmods.net/Counter-Strike:_Global_Offensive_Events#player_death print ( \"a player got killed by a\" , event . weapon ) -- all event fields are also mutable -- the following code will force all kills to show as headshots event . headshot = true end end callbacks . add ( e_callbacks . EVENT , on_event ) alternatively, if you only want to react to a specific event, there is an optional argument you can pass into the callbacks.add function -- this function will only be called for \"player_death\" events local function on_player_death ( event ) -- all fields can be found here: https://wiki.alliedmods.net/Counter-Strike:_Global_Offensive_Events#player_death print ( \"a player got killed by a\" , event . weapon ) end callbacks . add ( e_callbacks . EVENT , on_event , \"player_death\" )","title":"EVENT"},{"location":"api_callbacks/FINISH_COMMAND/","text":"this callback is called every time the client is done with a movement when this is called: all aimbot, antiaim, fakelag etc. features are finished it gives you an immutable instance of the current user_cmd_t local function on_finish_command ( cmd ) print ( \"final sidemove\" , cmd . move . y ) end callbacks . add ( e_callbacks . FINISH_COMMAND , on_finish_command )","title":"FINISH_COMMAND"},{"location":"api_callbacks/HITSCAN/","text":"this callback is called right before hitscan is run and allows to override various stuff passed into the callback is: an instance of the hitscan_context_t an immutable instance of the current user_cmd_t an immutable instance of the current unpredicted_data_t local function on_hitscan ( ctx , cmd , unpredicted_data ) -- force hitchance to 100 on head ctx : set_hitchance ( 100 , e_hitscan_groups . HEAD ) end callbacks . add ( e_callbacks . HITSCAN , on_hitscan )","title":"HITSCAN"},{"location":"api_callbacks/NET_UPDATE/","text":"this callback is called whenever csgo finishes processing the newest networked data this callback should be used to override entity props local function on_net_update () local local_player = entity_list . get_local_player () if local_player ~= nil then print ( \"current health\" , local_player : get_prop ( \"m_iHealth\" )) end end callbacks . add ( e_callbacks . NET_UPDATE , on_net_update )","title":"NET_UPDATE"},{"location":"api_callbacks/PAINT/","text":"Info you can call all render.* functions inside of this callback this callback is called every frame local function on_paint () print ( global_vars . frame_count ()) render . rect_filled ( vec2_t ( 100 , 100 ), vec2_t ( 200 , 200 ), color_t ( 255 , 0 , 0 )) end callbacks . add ( e_callbacks . PAINT , on_paint )","title":"PAINT"},{"location":"api_callbacks/PLAYER_ESP/","text":"Info you can call all render.* functions inside of this callback this callback is called right before the player esp is renderered, you can use it to add and override various things an instance of the player_esp_context_t is passed into the callback local font = render . create_font ( \"Impact\" , 40 , 400 ) local function on_player_esp ( ctx ) if ctx . dormant then return end local health = ctx . player : get_prop ( \"m_iHealth\" ) -- override font for name/weapon ctx : set_font ( font ) -- always add this flag ctx : add_flag ( \"FLAG\" ) -- conditional flag if health < 25 then ctx : add_flag ( \"LOW HP\" , color_t ( 255 , 0 , 0 )) end end callbacks . add ( e_callbacks . PLAYER_ESP , on_player_esp )","title":"PLAYER_ESP"},{"location":"api_callbacks/RUN_COMMAND/","text":"this callback is called after the game runs input prediction it gives you an instance of the current user_cmd_t and unpredicted_data_t you should avoid to change the current user_cmd_t since it will cause a re-prediction and will cost fps only use this instead of SETUP_COMMAND when you need info on the unpredicted_data_t -- simple edge jump local function on_run_command ( cmd , unpredicted_data ) local local_player = entity_list : get_local_player () -- were we on the ground before prediction? local was_on_ground = unpredicted_data : has_player_flag ( e_player_flags . ON_GROUND ) -- are we on ground right now? local is_on_ground = local_player : has_player_flag ( e_player_flags . ON_GROUND ) -- if we know that if we dont change anything about our movement, we will fall off this tick, we can automatically jump if not is_on_ground and was_on_ground then -- make sure we jump now cmd : add_button ( e_cmd_buttons . JUMP ) end end callbacks . add ( e_callbacks . RUN_COMMAND , on_run_command )","title":"RUN_COMMAND"},{"location":"api_callbacks/SCREEN_HITMARKER/","text":"Info you can call all render.* functions inside of this callback this callback is called every time the hack renders screen hitmarkers, it can be used to either replace the screen hitmarker, or override it completely returning true will stop the original screen hitmarkers from drawing local function on_screen_hitmarker ( screen_pos , alpha_factor , is_lethal , is_headshot ) render . push_alpha_modifier ( alpha_factor ) render . circle ( screen_pos , 12 , color_t ( 255 , 255 , 255 )) render . pop_alpha_modifier () return true end callbacks . add ( e_callbacks . SCREEN_HITMARKER , on_screen_hitmarker )","title":"SCREEN_HITMARKER"},{"location":"api_callbacks/SETUP_COMMAND/","text":"this callback is called every time the client prepares a movement tick ideally you would do all your movement-changing features in here it gives you an instance of the current user_cmd_t this is run before prediction local function on_setup_command ( cmd ) cmd . move . y = 450 end callbacks . add ( e_callbacks . SETUP_COMMAND )","title":"SETUP_COMMAND"},{"location":"api_callbacks/SHUTDOWN/","text":"this callback is called whenever the script is unloaded use it to reset stuff you changed in your script local function on_shutdown () print ( \"goodbye :(\" ) end callbacks . add ( e_callbacks . SHUTDOWN , on_shutdown )","title":"SHUTDOWN"},{"location":"api_callbacks/SUPPORTIVE_RECTANGLE/","text":"Info you can call all render.* functions inside of this callback this callback is called every time the hack renders the supportive rectangle, it can be used to replace supportive rectangle local function on_supportive_rectangle ( screen_pos , size , mood , phrase ) --[[ returning false -> renders everything without change returning true -> renders only the rectangle and line connector allowing you to add your own expressions mood -> \"neutral\", \"happy\", \"wink\" phrase -> \"good job\", \"good luck\", ... or nil ]] return true end callbacks . add ( e_callbacks . SUPPORTIVE_RECTANGLE , on_supportive_rectangle )","title":"SUPPORTIVE_RECTANGLE"},{"location":"api_callbacks/TARGET_SELECTION/","text":"this callback is called right before target selection is run and allows to override various stuff passed into the callback is: an instance of the target_selection_context_t an immutable instance of the current user_cmd_t an immutable instance of the current unpredicted_data_t local function on_target_selection ( ctx , cmd , unpredicted_data ) -- ignore the player with index 3 ctx : ignore_target ( 3 ) end callbacks . add ( e_callbacks . TARGET_SELECTION , on_target_selection )","title":"TARGET_SELECTION"},{"location":"api_callbacks/WORLD_HITMARKER/","text":"Info you can call all render.* functions inside of this callback this callback is called every time the hack renders world hitmarkers, it can be used to either replace the world hitmarker, or override it completely returning true will stop the original world hitmarkers from drawing local function on_world_hitmarker ( screen_pos , world_pos , alpha_factor , damage , is_lethal , is_headshot ) render . push_alpha_modifier ( alpha_factor ) render . circle ( screen_pos , 12 , color_t ( 255 , 255 , 255 )) render . pop_alpha_modifier () return true end callbacks . add ( e_callbacks . WORLD_HITMARKER , on_world_hitmarker )","title":"WORLD_HITMARKER"},{"location":"api_enumerations/e_animlayers/","text":"Example # print ( e_animlayers . MOVEMENT_MOVE ) Entries # Value AIMMATRIX WEAPON_ACTION WEAPON_ACTION_RECROUCH ADJUST MOVEMENT_JUMP_OR_FALL MOVEMENT_LAND_OR_CLIMB MOVEMENT_MOVE MOVEMENT_STRAFECHANGE WHOLE_BODY FLASHED FLINCH ALIVELOOP LEAN","title":"e_animlayers"},{"location":"api_enumerations/e_animlayers/#example","text":"print ( e_animlayers . MOVEMENT_MOVE )","title":"Example"},{"location":"api_enumerations/e_animlayers/#entries","text":"Value AIMMATRIX WEAPON_ACTION WEAPON_ACTION_RECROUCH ADJUST MOVEMENT_JUMP_OR_FALL MOVEMENT_LAND_OR_CLIMB MOVEMENT_MOVE MOVEMENT_STRAFECHANGE WHOLE_BODY FLASHED FLINCH ALIVELOOP LEAN","title":"Entries"},{"location":"api_enumerations/e_cmd_buttons/","text":"Example # print ( e_cmd_buttons . ATTACK ) Entries # Value ATTACK ATTACK JUMP DUCK FORWARD BACK USE CANCEL LEFT RIGHT MOVELEFT MOVERIGHT ATTACK2 RUN RELOAD ALT1 ALT2 SCORE SPEED WALK ZOOM WEAPON1 WEAPON2 BULLRUSH GRENADE1 GRENADE2 LOOKSPIN","title":"e_cmd_buttons"},{"location":"api_enumerations/e_cmd_buttons/#example","text":"print ( e_cmd_buttons . ATTACK )","title":"Example"},{"location":"api_enumerations/e_cmd_buttons/#entries","text":"Value ATTACK ATTACK JUMP DUCK FORWARD BACK USE CANCEL LEFT RIGHT MOVELEFT MOVERIGHT ATTACK2 RUN RELOAD ALT1 ALT2 SCORE SPEED WALK ZOOM WEAPON1 WEAPON2 BULLRUSH GRENADE1 GRENADE2 LOOKSPIN","title":"Entries"},{"location":"api_enumerations/e_font_flags/","text":"Example # print ( e_font_flags . ITALIC ) Entries # Value ITALIC UNDERLINE STRIKEOUT SYMBOL ANTIALIAS GAUSSIANBLUR ROTARY DROPSHADOW ADDITIVE OUTLINE","title":"e_font_flags"},{"location":"api_enumerations/e_font_flags/#example","text":"print ( e_font_flags . ITALIC )","title":"Example"},{"location":"api_enumerations/e_font_flags/#entries","text":"Value ITALIC UNDERLINE STRIKEOUT SYMBOL ANTIALIAS GAUSSIANBLUR ROTARY DROPSHADOW ADDITIVE OUTLINE","title":"Entries"},{"location":"api_enumerations/e_hitboxes/","text":"Example # print ( e_hitboxes . HEAD ) Entries # Value HEAD NECK PELVIS BODY THORAX CHEST UPPER_CHEST RIGHT_THIGH LEFT_THIGH RIGHT_CALF LEFT_CALF RIGHT_FOOT LEFT_FOOT RIGHT_HAND LEFT_HAND RIGHT_UPPER_ARM RIGHT_FOREARM LEFT_UPPER_ARM LEFT_FOREARM","title":"e_hitboxes"},{"location":"api_enumerations/e_hitboxes/#example","text":"print ( e_hitboxes . HEAD )","title":"Example"},{"location":"api_enumerations/e_hitboxes/#entries","text":"Value HEAD NECK PELVIS BODY THORAX CHEST UPPER_CHEST RIGHT_THIGH LEFT_THIGH RIGHT_CALF LEFT_CALF RIGHT_FOOT LEFT_FOOT RIGHT_HAND LEFT_HAND RIGHT_UPPER_ARM RIGHT_FOREARM LEFT_UPPER_ARM LEFT_FOREARM","title":"Entries"},{"location":"api_enumerations/e_hitgroups/","text":"Example # print ( e_hitgroups . HEAD ) Entries # Value GENERIC HEAD CHEST STOMACH LEFT_ARM RIGHT_ARM LEFT_LEG RIGHT_LEG NECK GEAR","title":"e_hitgroups"},{"location":"api_enumerations/e_hitgroups/#example","text":"print ( e_hitgroups . HEAD )","title":"Example"},{"location":"api_enumerations/e_hitgroups/#entries","text":"Value GENERIC HEAD CHEST STOMACH LEFT_ARM RIGHT_ARM LEFT_LEG RIGHT_LEG NECK GEAR","title":"Entries"},{"location":"api_enumerations/e_hitscan_groups/","text":"Example # print ( e_hitscan_groups . HEAD ) Entries # Value HEAD CHEST ARMS STOMACH LEGS FEET","title":"e_hitscan_groups"},{"location":"api_enumerations/e_hitscan_groups/#example","text":"print ( e_hitscan_groups . HEAD )","title":"Example"},{"location":"api_enumerations/e_hitscan_groups/#entries","text":"Value HEAD CHEST ARMS STOMACH LEGS FEET","title":"Entries"},{"location":"api_enumerations/e_items/","text":"Example # print ( e_items . WEAPON_DEAGLE ) Entries # Value WEAPON_DEAGLE WEAPON_ELITE WEAPON_FIVESEVEN WEAPON_GLOCK WEAPON_AK47 WEAPON_AUG WEAPON_AWP WEAPON_FAMAS WEAPON_G3SG1 WEAPON_GALILAR WEAPON_M249 WEAPON_M4A1 WEAPON_MAC10 WEAPON_P90 WEAPON_ZONE_REPULSOR WEAPON_MP5SD WEAPON_UMP45 WEAPON_XM1014 WEAPON_BIZON WEAPON_MAG7 WEAPON_NEGEV WEAPON_SAWEDOFF WEAPON_TEC9 WEAPON_TASER WEAPON_HKP2000 WEAPON_MP7 WEAPON_MP9 WEAPON_NOVA WEAPON_P250 WEAPON_SHIELD WEAPON_SCAR20 WEAPON_SG556 WEAPON_SSG08 WEAPON_KNIFEGG WEAPON_KNIFE ) WEAPON_FLASHBANG WEAPON_HEGRENADE WEAPON_SMOKEGRENADE WEAPON_MOLOTOV WEAPON_DECOY WEAPON_INCGRENADE WEAPON_C4 ITEM_KEVLAR ITEM_ASSAULTSUIT ITEM_HEAVYASSAULTSUIT ITEM_NVG ITEM_DEFUSER ITEM_CUTTERS WEAPON_HEALTHSHOT WEAPON_KNIFE_T WEAPON_M4A1_SILENCER WEAPON_USP_SILENCER WEAPON_CZ75A WEAPON_REVOLVER WEAPON_TAGRENADE WEAPON_FISTS WEAPON_BREACHCHARGE WEAPON_TABLET WEAPON_MELEE WEAPON_AXE WEAPON_HAMMER WEAPON_SPANNER WEAPON_KNIFE_GHOST WEAPON_FIREBOMB WEAPON_DIVERSION WEAPON_FRAG_GRENADE WEAPON_SNOWBALL WEAPON_BUMPMINE WEAPON_BAYONET WEAPON_KNIFE_CSS WEAPON_KNIFE_FLIP WEAPON_KNIFE_GUT WEAPON_KNIFE_KARAMBIT WEAPON_KNIFE_M9_BAYONET WEAPON_KNIFE_TACTICAL WEAPON_KNIFE_FALCHION WEAPON_KNIFE_SURVIVAL_BOWIE WEAPON_KNIFE_BUTTERFLY WEAPON_KNIFE_PUSH WEAPON_KNIFE_CORD WEAPON_KNIFE_CANIS WEAPON_KNIFE_URSUS WEAPON_KNIFE_GYPSY_JACKKNIFE WEAPON_KNIFE_OUTDOOR WEAPON_KNIFE_STILETTO WEAPON_KNIFE_WIDOWMAKER WEAPON_KNIFE_SKELETON T_GLOVES CT_GLOVES SPORTY_GLOVES SLICK_GLOVES LEATHER_HANDWRAPS MOTORCYCLE_GLOVES SPECIALIST_GLOVES STUDDED_HYDRA_GLOVES","title":"e_items"},{"location":"api_enumerations/e_items/#example","text":"print ( e_items . WEAPON_DEAGLE )","title":"Example"},{"location":"api_enumerations/e_items/#entries","text":"Value WEAPON_DEAGLE WEAPON_ELITE WEAPON_FIVESEVEN WEAPON_GLOCK WEAPON_AK47 WEAPON_AUG WEAPON_AWP WEAPON_FAMAS WEAPON_G3SG1 WEAPON_GALILAR WEAPON_M249 WEAPON_M4A1 WEAPON_MAC10 WEAPON_P90 WEAPON_ZONE_REPULSOR WEAPON_MP5SD WEAPON_UMP45 WEAPON_XM1014 WEAPON_BIZON WEAPON_MAG7 WEAPON_NEGEV WEAPON_SAWEDOFF WEAPON_TEC9 WEAPON_TASER WEAPON_HKP2000 WEAPON_MP7 WEAPON_MP9 WEAPON_NOVA WEAPON_P250 WEAPON_SHIELD WEAPON_SCAR20 WEAPON_SG556 WEAPON_SSG08 WEAPON_KNIFEGG WEAPON_KNIFE ) WEAPON_FLASHBANG WEAPON_HEGRENADE WEAPON_SMOKEGRENADE WEAPON_MOLOTOV WEAPON_DECOY WEAPON_INCGRENADE WEAPON_C4 ITEM_KEVLAR ITEM_ASSAULTSUIT ITEM_HEAVYASSAULTSUIT ITEM_NVG ITEM_DEFUSER ITEM_CUTTERS WEAPON_HEALTHSHOT WEAPON_KNIFE_T WEAPON_M4A1_SILENCER WEAPON_USP_SILENCER WEAPON_CZ75A WEAPON_REVOLVER WEAPON_TAGRENADE WEAPON_FISTS WEAPON_BREACHCHARGE WEAPON_TABLET WEAPON_MELEE WEAPON_AXE WEAPON_HAMMER WEAPON_SPANNER WEAPON_KNIFE_GHOST WEAPON_FIREBOMB WEAPON_DIVERSION WEAPON_FRAG_GRENADE WEAPON_SNOWBALL WEAPON_BUMPMINE WEAPON_BAYONET WEAPON_KNIFE_CSS WEAPON_KNIFE_FLIP WEAPON_KNIFE_GUT WEAPON_KNIFE_KARAMBIT WEAPON_KNIFE_M9_BAYONET WEAPON_KNIFE_TACTICAL WEAPON_KNIFE_FALCHION WEAPON_KNIFE_SURVIVAL_BOWIE WEAPON_KNIFE_BUTTERFLY WEAPON_KNIFE_PUSH WEAPON_KNIFE_CORD WEAPON_KNIFE_CANIS WEAPON_KNIFE_URSUS WEAPON_KNIFE_GYPSY_JACKKNIFE WEAPON_KNIFE_OUTDOOR WEAPON_KNIFE_STILETTO WEAPON_KNIFE_WIDOWMAKER WEAPON_KNIFE_SKELETON T_GLOVES CT_GLOVES SPORTY_GLOVES SLICK_GLOVES LEATHER_HANDWRAPS MOTORCYCLE_GLOVES SPECIALIST_GLOVES STUDDED_HYDRA_GLOVES","title":"Entries"},{"location":"api_enumerations/e_keybind_modes/","text":"Example # print ( e_keybind_modes . HOLD_ON ) Entries # Value TOGGLE HOLD_ON HOLD_OFF ALWAYS_ON ALWAYS_OFF","title":"e_keybind_modes"},{"location":"api_enumerations/e_keybind_modes/#example","text":"print ( e_keybind_modes . HOLD_ON )","title":"Example"},{"location":"api_enumerations/e_keybind_modes/#entries","text":"Value TOGGLE HOLD_ON HOLD_OFF ALWAYS_ON ALWAYS_OFF","title":"Entries"},{"location":"api_enumerations/e_keys/","text":"Example # print ( input . is_key_pressed ( e_keys . KEY_F7 )) Entries # Value KEY_NONE KEY_0 KEY_1 KEY_2 KEY_3 KEY_4 KEY_5 KEY_6 KEY_7 KEY_8 KEY_9 KEY_A KEY_B KEY_C KEY_D KEY_E KEY_F KEY_G KEY_H KEY_I KEY_J KEY_K KEY_L KEY_M KEY_N KEY_O KEY_P KEY_Q KEY_R KEY_S KEY_T KEY_U KEY_V KEY_W KEY_X KEY_Y KEY_Z KEY_PAD_0 KEY_PAD_1 KEY_PAD_2 KEY_PAD_3 KEY_PAD_4 KEY_PAD_5 KEY_PAD_6 KEY_PAD_7 KEY_PAD_8 KEY_PAD_9 KEY_PAD_DIVIDE KEY_PAD_MULTIPLY KEY_PAD_MINUS KEY_PAD_PLUS KEY_PAD_ENTER KEY_PAD_DECIMAL KEY_LBRACKET KEY_RBRACKET KEY_SEMICOLON KEY_APOSTROPHE KEY_BACKQUOTE KEY_COMMA KEY_PERIOD KEY_SLASH KEY_BACKSLASH KEY_MINUS KEY_EQUAL KEY_ENTER KEY_SPACE KEY_BACKSPACE KEY_TAB KEY_CAPSLOCK KEY_NUMLOCK KEY_ESCAPE KEY_SCROLLLOCK KEY_INSERT KEY_DELETE KEY_HOME KEY_END KEY_PAGEUP KEY_PAGEDOWN KEY_BREAK KEY_LSHIFT KEY_RSHIFT KEY_LALT KEY_RALT KEY_LCONTROL KEY_RCONTROL KEY_LWIN KEY_RWIN KEY_APP KEY_UP KEY_LEFT KEY_DOWN KEY_RIGHT KEY_F1 KEY_F2 KEY_F3 KEY_F4 KEY_F5 KEY_F6 KEY_F7 KEY_F8 KEY_F9 KEY_F10 KEY_F11 KEY_F12 KEY_CAPSLOCKTOGGLE KEY_NUMLOCKTOGGLE KEY_SCROLLLOCKTOGGLE MOUSE_LEFT MOUSE_RIGHT MOUSE_MIDDLE MOUSE_4 MOUSE_5 MOUSE_WHEEL_UP MOUSE_WHEEL_DOWN","title":"e_keys"},{"location":"api_enumerations/e_keys/#example","text":"print ( input . is_key_pressed ( e_keys . KEY_F7 ))","title":"Example"},{"location":"api_enumerations/e_keys/#entries","text":"Value KEY_NONE KEY_0 KEY_1 KEY_2 KEY_3 KEY_4 KEY_5 KEY_6 KEY_7 KEY_8 KEY_9 KEY_A KEY_B KEY_C KEY_D KEY_E KEY_F KEY_G KEY_H KEY_I KEY_J KEY_K KEY_L KEY_M KEY_N KEY_O KEY_P KEY_Q KEY_R KEY_S KEY_T KEY_U KEY_V KEY_W KEY_X KEY_Y KEY_Z KEY_PAD_0 KEY_PAD_1 KEY_PAD_2 KEY_PAD_3 KEY_PAD_4 KEY_PAD_5 KEY_PAD_6 KEY_PAD_7 KEY_PAD_8 KEY_PAD_9 KEY_PAD_DIVIDE KEY_PAD_MULTIPLY KEY_PAD_MINUS KEY_PAD_PLUS KEY_PAD_ENTER KEY_PAD_DECIMAL KEY_LBRACKET KEY_RBRACKET KEY_SEMICOLON KEY_APOSTROPHE KEY_BACKQUOTE KEY_COMMA KEY_PERIOD KEY_SLASH KEY_BACKSLASH KEY_MINUS KEY_EQUAL KEY_ENTER KEY_SPACE KEY_BACKSPACE KEY_TAB KEY_CAPSLOCK KEY_NUMLOCK KEY_ESCAPE KEY_SCROLLLOCK KEY_INSERT KEY_DELETE KEY_HOME KEY_END KEY_PAGEUP KEY_PAGEDOWN KEY_BREAK KEY_LSHIFT KEY_RSHIFT KEY_LALT KEY_RALT KEY_LCONTROL KEY_RCONTROL KEY_LWIN KEY_RWIN KEY_APP KEY_UP KEY_LEFT KEY_DOWN KEY_RIGHT KEY_F1 KEY_F2 KEY_F3 KEY_F4 KEY_F5 KEY_F6 KEY_F7 KEY_F8 KEY_F9 KEY_F10 KEY_F11 KEY_F12 KEY_CAPSLOCKTOGGLE KEY_NUMLOCKTOGGLE KEY_SCROLLLOCKTOGGLE MOUSE_LEFT MOUSE_RIGHT MOUSE_MIDDLE MOUSE_4 MOUSE_5 MOUSE_WHEEL_UP MOUSE_WHEEL_DOWN","title":"Entries"},{"location":"api_enumerations/e_latency_flows/","text":"Example # print ( e_latency_flows . OUTGOING ) Entries # Value OUTGOING INCOMING COMBINED","title":"e_latency_flows"},{"location":"api_enumerations/e_latency_flows/#example","text":"print ( e_latency_flows . OUTGOING )","title":"Example"},{"location":"api_enumerations/e_latency_flows/#entries","text":"Value OUTGOING INCOMING COMBINED","title":"Entries"},{"location":"api_enumerations/e_material_flags/","text":"Example # material : set_flag ( e_material_flags . IGNOREZ ) Entries # Value DEBUG NO_DEBUG_OVERRIDE NO_DRAW USE_IN_FILLRATE_MODE VERTEXCOLOR VERTEXALPHA SELFILLUM ADDITIVE ALPHATEST ZNEARER MODEL FLAT NOCULL NOFOG IGNOREZ DECAL ENVMAPSPHERE ENVMAPCAMERASPACE BASEALPHAENVMAPMASK TRANSLUCENT NORMALMAPALPHAENVMAPMASK NEEDS_SOFTWARE_SKINNING OPAQUETEXTURE ENVMAPMODE SUPPRESS_DECALS HALFLAMBERT WIREFRAME ALLOWALPHATOCOVERAGE ALPHA_MODIFIED_BY_PROXY VERTEXFOG","title":"e_material_flags"},{"location":"api_enumerations/e_material_flags/#example","text":"material : set_flag ( e_material_flags . IGNOREZ )","title":"Example"},{"location":"api_enumerations/e_material_flags/#entries","text":"Value DEBUG NO_DEBUG_OVERRIDE NO_DRAW USE_IN_FILLRATE_MODE VERTEXCOLOR VERTEXALPHA SELFILLUM ADDITIVE ALPHATEST ZNEARER MODEL FLAT NOCULL NOFOG IGNOREZ DECAL ENVMAPSPHERE ENVMAPCAMERASPACE BASEALPHAENVMAPMASK TRANSLUCENT NORMALMAPALPHAENVMAPMASK NEEDS_SOFTWARE_SKINNING OPAQUETEXTURE ENVMAPMODE SUPPRESS_DECALS HALFLAMBERT WIREFRAME ALLOWALPHATOCOVERAGE ALPHA_MODIFIED_BY_PROXY VERTEXFOG","title":"Entries"},{"location":"api_enumerations/e_player_flags/","text":"Example # print ( e_player_flags . ON_GROUND ) Entries # Value ON_GROUND DUCKING FROZEN FAKE_CLIENT GOD_MODE","title":"e_player_flags"},{"location":"api_enumerations/e_player_flags/#example","text":"print ( e_player_flags . ON_GROUND )","title":"Example"},{"location":"api_enumerations/e_player_flags/#entries","text":"Value ON_GROUND DUCKING FROZEN FAKE_CLIENT GOD_MODE","title":"Entries"},{"location":"api_enumerations/e_poses/","text":"Example # print ( e_player_poses . LADDER_SPEED ) Entries # Value LEAN_YAW SPEED LADDER_SPEED LADDER_YAW MOVE_YAW RUN BODY_YAW BODY_PITCH DEATH_YAW STAND JUMP_FALL AIM_BLEND_STAND_IDLE AIM_BLEND_CROUCH_IDLE STRAFE_DIR AIM_BLEND_STAND_WALK AIM_BLEND_STAND_RUN AIM_BLEND_CROUCH_WALK MOVE_BLEND_WALK MOVE_BLEND_RUN MOVE_BLEND_CROUCH_WALK","title":"e_poses"},{"location":"api_enumerations/e_poses/#example","text":"print ( e_player_poses . LADDER_SPEED )","title":"Example"},{"location":"api_enumerations/e_poses/#entries","text":"Value LEAN_YAW SPEED LADDER_SPEED LADDER_YAW MOVE_YAW RUN BODY_YAW BODY_PITCH DEATH_YAW STAND JUMP_FALL AIM_BLEND_STAND_IDLE AIM_BLEND_CROUCH_IDLE STRAFE_DIR AIM_BLEND_STAND_WALK AIM_BLEND_STAND_RUN AIM_BLEND_CROUCH_WALK MOVE_BLEND_WALK MOVE_BLEND_RUN MOVE_BLEND_CROUCH_WALK","title":"Entries"},{"location":"api_enumerations/e_ragebot_cfg/","text":"Example # print ( e_ragebot_cfg . AUTO_SNIPER ) Entries # Value AUTO_SNIPER SCOUT AWP HEAVY_PISTOLS PISTOLS OTHER ZEUS","title":"e_ragebot_cfg"},{"location":"api_enumerations/e_ragebot_cfg/#example","text":"print ( e_ragebot_cfg . AUTO_SNIPER )","title":"Example"},{"location":"api_enumerations/e_ragebot_cfg/#entries","text":"Value AUTO_SNIPER SCOUT AWP HEAVY_PISTOLS PISTOLS OTHER ZEUS","title":"Entries"},{"location":"api_enumerations/e_weapon_types/","text":"Example # print ( e_weapon_types . RIFLE ) Entries # Value KNIFE PISTOL SMG RIFLE SHOTGUN SNIPER MACHINE_GUN C4 GRENADE EQUIPMENT STACKABLE_ITEM","title":"e_weapon_types"},{"location":"api_enumerations/e_weapon_types/#example","text":"print ( e_weapon_types . RIFLE )","title":"Example"},{"location":"api_enumerations/e_weapon_types/#entries","text":"Value KNIFE PISTOL SMG RIFLE SHOTGUN SNIPER MACHINE_GUN C4 GRENADE EQUIPMENT STACKABLE_ITEM","title":"Entries"},{"location":"api_functions/antiaim/","text":"antiaim # is_inverting_desync # Returns if the player has inverted desync bool is_inverting_desync() Example print ( \"desync inverted: \" , antiaim . is_inverting_desync ()) is_fakeducking # Returns if the player is fakeducking bool is_fakeducking() Example print ( \"player fakeducking: \" , antiaim . is_fakeducking ()) is_inverting_body_lean # Returns if the player has inverted body lean bool is_inverting_body_lean() Example print ( \"player inverted lean: \" , antiaim . is_inverting_body_lean ()) get_max_desync_range # Returns the maximum range for desync int get_max_desync_range() Example print ( \"desync range: \" , antiaim . get_max_desync_range ()) get_real_angle # Returns the player's real angle float get_real_angle() Example print ( \"real angle:\" , antiaim . get_real_angle ()) get_fake_angle # Returns the player's fake angle float get_fake_angle() Example print ( \"fake angle:\" , antiaim . get_fake_angle ()) get_desync_side # Returns the player's current desync side int get_desync_side() Example --[[ Return values: 0 -> player desync has no side (not desyncing) 1 -> player desync is on the left 2 -> player desync on the right ]] print ( \"desync side:\" , antiaim . get_desync_side ()) get_manual_override # returns 0 if off, 1 for left, 2 for middle, 3 for right int get_manual_override()","title":"antiaim"},{"location":"api_functions/antiaim/#antiaim","text":"","title":"antiaim"},{"location":"api_functions/antiaim/#is_inverting_desync","text":"Returns if the player has inverted desync bool is_inverting_desync()","title":"is_inverting_desync"},{"location":"api_functions/antiaim/#is_fakeducking","text":"Returns if the player is fakeducking bool is_fakeducking()","title":"is_fakeducking"},{"location":"api_functions/antiaim/#is_inverting_body_lean","text":"Returns if the player has inverted body lean bool is_inverting_body_lean()","title":"is_inverting_body_lean"},{"location":"api_functions/antiaim/#get_max_desync_range","text":"Returns the maximum range for desync int get_max_desync_range()","title":"get_max_desync_range"},{"location":"api_functions/antiaim/#get_real_angle","text":"Returns the player's real angle float get_real_angle()","title":"get_real_angle"},{"location":"api_functions/antiaim/#get_fake_angle","text":"Returns the player's fake angle float get_fake_angle()","title":"get_fake_angle"},{"location":"api_functions/antiaim/#get_desync_side","text":"Returns the player's current desync side int get_desync_side()","title":"get_desync_side"},{"location":"api_functions/antiaim/#get_manual_override","text":"returns 0 if off, 1 for left, 2 for middle, 3 for right int get_manual_override()","title":"get_manual_override"},{"location":"api_functions/callbacks/","text":"callbacks # add # Registers an event with the specified callback, or optionally if using the EVENT enum allows for an additional argument specifying a certain event to be monitored (ex: \"player_death\") void callbacks.add(<enum> event_type, <function> callback, [optional] <string> event_name) Fields Description event_type e_callbacks event_type callback function callback function event_name string [optional] event to monitor Example callbacks . add ( e_callbacks . EVENT , on_event ) --monitors all events callbacks . add ( e_callbacks . EVENT , on_player_hurt , \"player_hurt\" ) --moniitors only player_hurt event","title":"callbacks"},{"location":"api_functions/callbacks/#callbacks","text":"","title":"callbacks"},{"location":"api_functions/callbacks/#add","text":"Registers an event with the specified callback, or optionally if using the EVENT enum allows for an additional argument specifying a certain event to be monitored (ex: \"player_death\") void callbacks.add(<enum> event_type, <function> callback, [optional] <string> event_name) Fields Description event_type e_callbacks event_type callback function callback function event_name string [optional] event to monitor","title":"add"},{"location":"api_functions/client/","text":"client # get_local_time # Returns the current hours, minutes, and seconds int get_local_time() Example print ( client . get_local_time ()) -- prints current (hrs,mins,sec) get_unix_time # Returns the current unix timestamp int get_unix_time() Example print ( client . get_unix_time ()) -- prints current unix time get_hitgroup_name # Returns the specified hitgroup as a string string get_hitgroup_name() Fields Description hitgroup e_hitgroups hitgroup Example print ( client . get_hitgroup_name ( e_hitgroups . HEAD )) get_hitbox_name # Returns the specified hitbox as a string string get_hitbox_name() Fields Description hitbox e_hitboxes hitbox Example print ( client . get_hitbox_name ( e_hitboxes . HEAD )) time_to_ticks # Converts time (in seconds) into csgo ticks int client.time_to_ticks(<float> time) Example print ( client . time_to_ticks ( 1 )) -- prints 64 on a 64-tick server ticks_to_time # Converts csgo ticks into seconds float client.ticks_to_time(<int> ticks) Example print ( client . ticks_to_time ( 64 )) -- prints 1 get_fps # Returns the client's frames per second int get_fps() Example print ( client . get_fps ()) -- prints the current client frames per second get_tickrate # Returns the current server's tickrate int get_tickrate() Example print ( string.format ( \"Current Server Tickrate: %d\" , client . get_tickrate ())) precache_model # Adds model to level precache list void precache_model(<string> name) Fields Description name string model path to cache Example client . precache_model ( \"models/weapons/v_ak47beast.mdl\" ) random_float # Returns a random float between min and max float random_float(<float> min, <float> max) Fields Description min float minimum float value max float maximum float value Example print ( client . random_float ( 0.5 , 2.5 )) -- prints a random float between (0.5 - 2.5) random_int # Returns a random int between min and max int random_int(<int> min, <int> max) Fields Description min int minimum int value max int maximum int value Example print ( client . random_int ( 1 , 10 )) -- prints a random int between 1 and 10 is_in_thirdperson # Returns if the camera is in third person bool is_in_thirdperson() Example print ( client . is_in_thirdperson ()) -- returns true or false if condition is met can_fire # Returns if the client is able to fire bool can_fire() Example print ( client . can_fire ()) -- returns true or false if condition is met log_screen # Prints to screen logs void log_screen(<string> fmt,...) Example client . log_screen ( \"white text\" ) client . log_screen ( \"white text\" , color_t ( 255 , 0 , 0 ), \"red text\" , \"still red text\" ) client . log_screen ( color_t ( 0 , 255 , 0 ), \"green text\" ) log # Prints to console logs void log(<string> fmt,...) Example client . log ( \"white text\" ) client . log ( \"white text\" , color_t ( 255 , 0 , 0 ), \"red text\" , \"still red text\" ) client . log ( color_t ( 0 , 255 , 0 ), \"green text\" ) delay_call # Runs a function after a defined delay void delay_call(<function> fn, <float> delay) Example local function delayed_call () print ( \"lol delay\" ) end client . delay_call ( delayed_call , 5.0 )","title":"client"},{"location":"api_functions/client/#client","text":"","title":"client"},{"location":"api_functions/client/#get_local_time","text":"Returns the current hours, minutes, and seconds int get_local_time()","title":"get_local_time"},{"location":"api_functions/client/#get_unix_time","text":"Returns the current unix timestamp int get_unix_time()","title":"get_unix_time"},{"location":"api_functions/client/#get_hitgroup_name","text":"Returns the specified hitgroup as a string string get_hitgroup_name() Fields Description hitgroup e_hitgroups hitgroup","title":"get_hitgroup_name"},{"location":"api_functions/client/#get_hitbox_name","text":"Returns the specified hitbox as a string string get_hitbox_name() Fields Description hitbox e_hitboxes hitbox","title":"get_hitbox_name"},{"location":"api_functions/client/#time_to_ticks","text":"Converts time (in seconds) into csgo ticks int client.time_to_ticks(<float> time)","title":"time_to_ticks"},{"location":"api_functions/client/#ticks_to_time","text":"Converts csgo ticks into seconds float client.ticks_to_time(<int> ticks)","title":"ticks_to_time"},{"location":"api_functions/client/#get_fps","text":"Returns the client's frames per second int get_fps()","title":"get_fps"},{"location":"api_functions/client/#get_tickrate","text":"Returns the current server's tickrate int get_tickrate()","title":"get_tickrate"},{"location":"api_functions/client/#precache_model","text":"Adds model to level precache list void precache_model(<string> name) Fields Description name string model path to cache","title":"precache_model"},{"location":"api_functions/client/#random_float","text":"Returns a random float between min and max float random_float(<float> min, <float> max) Fields Description min float minimum float value max float maximum float value","title":"random_float"},{"location":"api_functions/client/#random_int","text":"Returns a random int between min and max int random_int(<int> min, <int> max) Fields Description min int minimum int value max int maximum int value","title":"random_int"},{"location":"api_functions/client/#is_in_thirdperson","text":"Returns if the camera is in third person bool is_in_thirdperson()","title":"is_in_thirdperson"},{"location":"api_functions/client/#can_fire","text":"Returns if the client is able to fire bool can_fire()","title":"can_fire"},{"location":"api_functions/client/#log_screen","text":"Prints to screen logs void log_screen(<string> fmt,...)","title":"log_screen"},{"location":"api_functions/client/#log","text":"Prints to console logs void log(<string> fmt,...)","title":"log"},{"location":"api_functions/client/#delay_call","text":"Runs a function after a defined delay void delay_call(<function> fn, <float> delay)","title":"delay_call"},{"location":"api_functions/debug_overlay/","text":"debug_overlay # add_box # Renders a debug box around the the specified position void add_box(<vec3_t> pos, <vec3_t> mins, <vec3_t> maxs, <angle_t> orientation, <color_t> color, <float> duration) Fields Description pos vec3_t world position mins vec3_t box mins maxs vec3_t box maxs orientation angle_t orientation color color_t box color duration float box duration Example debug_overlay . add_box ( pos , mins , maxs , orientation , color_t ( 255 , 255 , 255 ), 1.0 ) add_sphere # Renders a debug sphere around the the specified position void add_sphere(<vec3_t> pos, <float> radius, <int> theta, <int> phi, <color_t> color, <float> duration) Fields Description pos vec3_t world position radius float sphere radius theta int phi int color color_t sphere color duration float sphere duration Example local local_player = entity_list . get_local_player () local abs_origin = local_player : get_prop ( \"m_vecAbsOrigin\" ) debug_overlay . add_sphere ( abs_origin , 15 , 20 , 5 , color_t ( 255 , 255 , 255 ), 1.0 ) add_line # Renders a debug line between two points void add_line(<vec3_t> start, <vec3_t> end, <color_t> color, <bool> skip_occlusion, <float> duration) Fields Description start vec3_t point start end vec3_t point end color color line color skip_occlusion bool should the line be occluded Example local local_player = entity_list . get_local_player () local abs_origin = local_player : get_prop ( \"m_vecAbsOrigin\" ) debug_overlay . add_line ( abs_origin , abs_origin + vec3_t ( 10 , 0 , 0 ), color_t ( 255 , 255 , 255 ), true , 5.0 ) add_capsule # Renders a debug capsule void add_capsule(<vec3_t> mins, <vec3_t> maxs, <float> radius, <color_t> color, <bool> skip_occlusion, <float> duration) Fields Description mins vec3_t capsule minimum bounds maxs vec3_t capsule maximum bounds radius float capsule size color color capsule color skip_occlusion bool should the capsule be occluded duration float render time of capsule Example local local_player = entity_list . get_local_player () local abs_origin = local_player : get_render_origin () debug_overlay . add_capsule ( abs_origin , abs_origin + vec3_t ( 10 , 0 , 0 ), 10. f , color_t ( 255 , 255 , 255 ), true , 5.0 )","title":"debug_overlay"},{"location":"api_functions/debug_overlay/#debug_overlay","text":"","title":"debug_overlay"},{"location":"api_functions/debug_overlay/#add_box","text":"Renders a debug box around the the specified position void add_box(<vec3_t> pos, <vec3_t> mins, <vec3_t> maxs, <angle_t> orientation, <color_t> color, <float> duration) Fields Description pos vec3_t world position mins vec3_t box mins maxs vec3_t box maxs orientation angle_t orientation color color_t box color duration float box duration","title":"add_box"},{"location":"api_functions/debug_overlay/#add_sphere","text":"Renders a debug sphere around the the specified position void add_sphere(<vec3_t> pos, <float> radius, <int> theta, <int> phi, <color_t> color, <float> duration) Fields Description pos vec3_t world position radius float sphere radius theta int phi int color color_t sphere color duration float sphere duration","title":"add_sphere"},{"location":"api_functions/debug_overlay/#add_line","text":"Renders a debug line between two points void add_line(<vec3_t> start, <vec3_t> end, <color_t> color, <bool> skip_occlusion, <float> duration) Fields Description start vec3_t point start end vec3_t point end color color line color skip_occlusion bool should the line be occluded","title":"add_line"},{"location":"api_functions/debug_overlay/#add_capsule","text":"Renders a debug capsule void add_capsule(<vec3_t> mins, <vec3_t> maxs, <float> radius, <color_t> color, <bool> skip_occlusion, <float> duration) Fields Description mins vec3_t capsule minimum bounds maxs vec3_t capsule maximum bounds radius float capsule size color color capsule color skip_occlusion bool should the capsule be occluded duration float render time of capsule","title":"add_capsule"},{"location":"api_functions/engine/","text":"engine # get_view_angles # Returns current player's client view angles vec3_t get_view_angles()) Example print ( engine . get_view_angles ()) execute_cmd # Executes a provided command void execute_cmd(<string> command_name) Fields Description command_name string console command name Example engine . execute_cmd ( \"say hi\" ) get_choked_commands # Returns the number of choked commands int get_choked_commands() Example print ( \"choked commands\" , engine . get_choked_commands ()) get_last_acknowledged_command # Returns the last acknowledged command int get_last_acknowledged_command() Example print ( \"last ack command\" , engine . get_last_acknowledged_command ()) get_last_outgoing_command # Returns the last outgoing command int get_last_outgoing_command() Example print ( \"last outgoing command\" , engine . get_last_outgoing_command ()) get_latency # Returns latency int get_latency([optional] <e_latency_flows> latency_type = e_latency_flows.OUTGOING) Fields Description latency_type e_latency_flows [optional] latency type (outgoing by default) Example print ( \"latency\" , engine . get_latency ( e_latency_flows . INCOMING )) get_level_name # Returns the level name as a string string get_level_name() Example print ( \"level name\" , engine . get_level_name ()) get_level_name_short # Returns a short version of the level name as a string string get_level_name_short() Example print ( \"level name short\" , engine . get_level_name_short ()) is_app_active # Returns if the application is active or not (e.g. whether you're tabbed in or not) bool is_app_active() Example print ( \"is app active\" , engine . is_app_active ()) get_local_player_index # Returns the local player's entity index int get_local_player_index() Example print ( \"local player idx\" , engine . get_local_player_index ()) get_player_index_from_user_id # Returns player entity index from their user id int get_player_index_from_user_id(<int> user_id) Fields Description user_id int player's user id Example local function event_callback ( event_info ) local user_id = engine . get_player_index_from_user_id ( event_info . userid ) print ( user_id ) end is_connected # Returns if the user is connected to a server bool is_connected() Example print ( \"is connected\" , engine . is_connected ()) is_in_game # Returns if the user is in game bool is_in_game() Example print ( \"is in game\" , engine . is_in_game ()) play_sound # Plays a sound on the client void play_sound(<string> name, [optional] <float> volume = 1.0, [optional] <int> pitch = 100) Fields Description name string sound name volume float [optional] sound's volume pitch int [optional] sound's pitch Example engine . play_sound ( \"sound.wav\" , 1.0 , 100 ) get_view_angles # returns camera angles angle_t get_view_angles() set_view_angles # sets camera angles void set_view_angles(<angle_t> camera_angles) get_bomb_radius # returns bomb radius dependent on map and game mode float get_bomb_radius() get_bsp_entity # returns bsp entity info for the specified classname string[] get_bsp_entity(<string> classname) get_bsp_entities # returns all bsp entity infos string[][] get_bsp_entities()","title":"engine"},{"location":"api_functions/engine/#engine","text":"","title":"engine"},{"location":"api_functions/engine/#get_view_angles","text":"Returns current player's client view angles vec3_t get_view_angles())","title":"get_view_angles"},{"location":"api_functions/engine/#execute_cmd","text":"Executes a provided command void execute_cmd(<string> command_name) Fields Description command_name string console command name","title":"execute_cmd"},{"location":"api_functions/engine/#get_choked_commands","text":"Returns the number of choked commands int get_choked_commands()","title":"get_choked_commands"},{"location":"api_functions/engine/#get_last_acknowledged_command","text":"Returns the last acknowledged command int get_last_acknowledged_command()","title":"get_last_acknowledged_command"},{"location":"api_functions/engine/#get_last_outgoing_command","text":"Returns the last outgoing command int get_last_outgoing_command()","title":"get_last_outgoing_command"},{"location":"api_functions/engine/#get_latency","text":"Returns latency int get_latency([optional] <e_latency_flows> latency_type = e_latency_flows.OUTGOING) Fields Description latency_type e_latency_flows [optional] latency type (outgoing by default)","title":"get_latency"},{"location":"api_functions/engine/#get_level_name","text":"Returns the level name as a string string get_level_name()","title":"get_level_name"},{"location":"api_functions/engine/#get_level_name_short","text":"Returns a short version of the level name as a string string get_level_name_short()","title":"get_level_name_short"},{"location":"api_functions/engine/#is_app_active","text":"Returns if the application is active or not (e.g. whether you're tabbed in or not) bool is_app_active()","title":"is_app_active"},{"location":"api_functions/engine/#get_local_player_index","text":"Returns the local player's entity index int get_local_player_index()","title":"get_local_player_index"},{"location":"api_functions/engine/#get_player_index_from_user_id","text":"Returns player entity index from their user id int get_player_index_from_user_id(<int> user_id) Fields Description user_id int player's user id","title":"get_player_index_from_user_id"},{"location":"api_functions/engine/#is_connected","text":"Returns if the user is connected to a server bool is_connected()","title":"is_connected"},{"location":"api_functions/engine/#is_in_game","text":"Returns if the user is in game bool is_in_game()","title":"is_in_game"},{"location":"api_functions/engine/#play_sound","text":"Plays a sound on the client void play_sound(<string> name, [optional] <float> volume = 1.0, [optional] <int> pitch = 100) Fields Description name string sound name volume float [optional] sound's volume pitch int [optional] sound's pitch","title":"play_sound"},{"location":"api_functions/engine/#get_view_angles_1","text":"returns camera angles angle_t get_view_angles()","title":"get_view_angles"},{"location":"api_functions/engine/#set_view_angles","text":"sets camera angles void set_view_angles(<angle_t> camera_angles)","title":"set_view_angles"},{"location":"api_functions/engine/#get_bomb_radius","text":"returns bomb radius dependent on map and game mode float get_bomb_radius()","title":"get_bomb_radius"},{"location":"api_functions/engine/#get_bsp_entity","text":"returns bsp entity info for the specified classname string[] get_bsp_entity(<string> classname)","title":"get_bsp_entity"},{"location":"api_functions/engine/#get_bsp_entities","text":"returns all bsp entity infos string[][] get_bsp_entities()","title":"get_bsp_entities"},{"location":"api_functions/entity_list/","text":"entity_list # get_entity # Returns entity object from an entity index or handle entity_t get_entity(<int> index_or_handle) Fields Description index_or_handle int entity index or handle Example local first_player = entity_list . get_entity ( 1 ) local ground_entity = entity_list . get_entity ( first_player : get_prop ( \"m_hGroundEntity\" )) get_player_from_userid # Returns entity object from a player's user id entity_t get_player_from_userid(<int> user_id) Fields Description user_id int user id Example local victim = entity_list . get_player_from_userid ( event_info . userid ) print ( victim : get_name ()) get_local_player # Returns local player entity object entity_t get_local_player() Example local local_player = entity_list . get_local_player () print ( local_player : get_prop ( \"m_iHealth\" )) -- prints player's health get_local_player_or_spectating # Returns local_player if alive or currently spectated player entity_t get_local_player_or_spectating() Example local entity = entity_list . get_local_player_or_spectating () print ( entity : get_name ()) --print's localplayer name or observer target's name get_entities_by_classid # Returns table of entities with the specified class id entity_t[] get_entities_by_classid(<int> class_id) Fields Description class_id int class id Example local class_list = entity_list . get_entities_by_classid ( 40 ) for i , v in pairs ( class_list ) do print ( i , v ) end get_entities_by_name # Returns table of entities with the specified name entity_t[] get_entities_by_name(<string> class_name) Fields Description class_name string class name Example local class_list = entity_list . get_entities_by_name ( \"CCSPlayer\" ) for i , v in pairs ( class_list ) do print ( i , v : get_name ()) end get_players # Returns table of players entity_t[] get_players([optional] <bool> enemies_only = false) Fields Description enemies_only bool [optional] only return enemies Example local enemies_only = entity_list . get_players ( true ) for _ , player in pairs ( enemies_only ) do print ( \"Entity Index: \" , player : get_index ()) end get_highest_entity_index # Returns the maximum entity index int get_highest_entity_index() Example print ( entity_list . get_highest_entity_index ())","title":"entity_list"},{"location":"api_functions/entity_list/#entity_list","text":"","title":"entity_list"},{"location":"api_functions/entity_list/#get_entity","text":"Returns entity object from an entity index or handle entity_t get_entity(<int> index_or_handle) Fields Description index_or_handle int entity index or handle","title":"get_entity"},{"location":"api_functions/entity_list/#get_player_from_userid","text":"Returns entity object from a player's user id entity_t get_player_from_userid(<int> user_id) Fields Description user_id int user id","title":"get_player_from_userid"},{"location":"api_functions/entity_list/#get_local_player","text":"Returns local player entity object entity_t get_local_player()","title":"get_local_player"},{"location":"api_functions/entity_list/#get_local_player_or_spectating","text":"Returns local_player if alive or currently spectated player entity_t get_local_player_or_spectating()","title":"get_local_player_or_spectating"},{"location":"api_functions/entity_list/#get_entities_by_classid","text":"Returns table of entities with the specified class id entity_t[] get_entities_by_classid(<int> class_id) Fields Description class_id int class id","title":"get_entities_by_classid"},{"location":"api_functions/entity_list/#get_entities_by_name","text":"Returns table of entities with the specified name entity_t[] get_entities_by_name(<string> class_name) Fields Description class_name string class name","title":"get_entities_by_name"},{"location":"api_functions/entity_list/#get_players","text":"Returns table of players entity_t[] get_players([optional] <bool> enemies_only = false) Fields Description enemies_only bool [optional] only return enemies","title":"get_players"},{"location":"api_functions/entity_list/#get_highest_entity_index","text":"Returns the maximum entity index int get_highest_entity_index()","title":"get_highest_entity_index"},{"location":"api_functions/exploits/","text":"exploits # get_charge # Returns current charged ticks for exploits int get_charge() Example print ( \"charged ticks\" , exploits . get_charge ()) get_max_charge # Returns maximum amount of charged ticks for exploits int get_max_charge() Example print ( \"max charged ticks\" , exploits . get_max_charge ()) Warning The following functions should ideally only be called in setup_command and run_command callbacks force_uncharge # Releases current charged ticks for exploits, will teleport you forward void force_uncharge() Example exploits . force_uncharge () force_recharge # Forces cheat to recharge ticks for exploits void force_recharge() Example exploits . force_recharge () block_recharge # Stops the cheat from recharging ticks for exploits void block_recharge() Example exploits . block_recharge () allow_recharge # Allows the cheat to recharge ticks for exploits void allow_recharge() Example exploits . allow_recharge ()","title":"exploits"},{"location":"api_functions/exploits/#exploits","text":"","title":"exploits"},{"location":"api_functions/exploits/#get_charge","text":"Returns current charged ticks for exploits int get_charge()","title":"get_charge"},{"location":"api_functions/exploits/#get_max_charge","text":"Returns maximum amount of charged ticks for exploits int get_max_charge()","title":"get_max_charge"},{"location":"api_functions/exploits/#force_uncharge","text":"Releases current charged ticks for exploits, will teleport you forward void force_uncharge()","title":"force_uncharge"},{"location":"api_functions/exploits/#force_recharge","text":"Forces cheat to recharge ticks for exploits void force_recharge()","title":"force_recharge"},{"location":"api_functions/exploits/#block_recharge","text":"Stops the cheat from recharging ticks for exploits void block_recharge()","title":"block_recharge"},{"location":"api_functions/exploits/#allow_recharge","text":"Allows the cheat to recharge ticks for exploits void allow_recharge()","title":"allow_recharge"},{"location":"api_functions/game_rules/","text":"game_rules # get_prop # Returns specified game_rule prop any get_prop(<string> prop_name, [optional] <int> array_index) Fields Description prop_name string networked prop name array_index int [optional] array index to use if the prop is an array Example print ( \"Valve DS:\" , game_rules . get_prop ( \"m_bIsValveDS\" )) set_prop # Sets a specified game_rule prop void set_prop(<string> prop_name, <any> value, [optional] <int> array_index) Fields Description prop_name string networked prop name value any value to set the prop to array_index any [optional] array index to use if the prop is an array Example game_rules . set_prop ( \"m_bIsValveDS\" , 1 )","title":"game_rules"},{"location":"api_functions/game_rules/#game_rules","text":"","title":"game_rules"},{"location":"api_functions/game_rules/#get_prop","text":"Returns specified game_rule prop any get_prop(<string> prop_name, [optional] <int> array_index) Fields Description prop_name string networked prop name array_index int [optional] array index to use if the prop is an array","title":"get_prop"},{"location":"api_functions/game_rules/#set_prop","text":"Sets a specified game_rule prop void set_prop(<string> prop_name, <any> value, [optional] <int> array_index) Fields Description prop_name string networked prop name value any value to set the prop to array_index any [optional] array index to use if the prop is an array","title":"set_prop"},{"location":"api_functions/global_vars/","text":"global_vars # real_time # Returns absolute time float real_time() Example print ( \"real time\" , global_vars . real_time ()) frame_count # Returns absolute frame count int frame_count() Example print ( \"frame count\" , global_vars . frame_count ()) absolute_frame_time # Returns non paused frametime float absolute_frame_time() Example print ( \"abs frame time\" , global_vars . absolute_frame_time ()) cur_time # Returns current time for your player float cur_time() Example print ( \"cur time\" , global_vars . cur_time ()) frame_time # Returns time spent on last server or client frame float frame_time() Example print ( \"frame time\" , global_vars . frame_time ()) max_clients # Returns current maxplayers setting int max_clients() Example print ( \"max clients\" , global_vars . max_clients ()) tick_count # Returns simulation ticks int tick_count() Example print ( \"tick count\" , global_vars . tick_count ()) interval_per_tick # Returns simulation tick interval float interval_per_tick() Example print ( \"interval per tick\" , global_vars . interval_per_tick ()) interpolation_amount # Returns interpolation amount float interpolation_amount() Example print ( \"interpolation amount\" , global_vars . interpolation_amount ()) simticks_this_frame # Returns simulation ticks this frame int simticks_this_frame() Example print ( \"simticks this frame\" , global_vars . simticks_this_frame ()) server_tick # returns the current tick on the server int server_tick()","title":"global_vars"},{"location":"api_functions/global_vars/#global_vars","text":"","title":"global_vars"},{"location":"api_functions/global_vars/#real_time","text":"Returns absolute time float real_time()","title":"real_time"},{"location":"api_functions/global_vars/#frame_count","text":"Returns absolute frame count int frame_count()","title":"frame_count"},{"location":"api_functions/global_vars/#absolute_frame_time","text":"Returns non paused frametime float absolute_frame_time()","title":"absolute_frame_time"},{"location":"api_functions/global_vars/#cur_time","text":"Returns current time for your player float cur_time()","title":"cur_time"},{"location":"api_functions/global_vars/#frame_time","text":"Returns time spent on last server or client frame float frame_time()","title":"frame_time"},{"location":"api_functions/global_vars/#max_clients","text":"Returns current maxplayers setting int max_clients()","title":"max_clients"},{"location":"api_functions/global_vars/#tick_count","text":"Returns simulation ticks int tick_count()","title":"tick_count"},{"location":"api_functions/global_vars/#interval_per_tick","text":"Returns simulation tick interval float interval_per_tick()","title":"interval_per_tick"},{"location":"api_functions/global_vars/#interpolation_amount","text":"Returns interpolation amount float interpolation_amount()","title":"interpolation_amount"},{"location":"api_functions/global_vars/#simticks_this_frame","text":"Returns simulation ticks this frame int simticks_this_frame()","title":"simticks_this_frame"},{"location":"api_functions/global_vars/#server_tick","text":"returns the current tick on the server int server_tick()","title":"server_tick"},{"location":"api_functions/input/","text":"input # find_key_bound_to_binding # returns key bound to a csgo setting e_keys find_key_bound_to_binding(<string> setting_name) Fields Description setting_name string setting name Example local crouch_key = input . find_key_bound_to_binding ( \"duck\" ) print ( \"Is Crouching:\" , input . is_key_held ( crouch_key )) get_mouse_pos # returns x and y coordinates of the mouse position as a vec2_t vec2_t get_mouse_pos() Example print ( input . get_mouse_pos ()) is_mouse_in_bounds # returns if the mouse is in specified boundss bool is_mouse_in_bounds(<vec2_t> bounds_start, <vec2_t> bounds_end) Fields Description bounds_start vec2_t area bounds start bounds_end vec2_t area bounds end Example print ( input . is_mouse_in_bounds ( vec2_t ( 10 , 20 ), vec2_t ( 30 , 60 ))) is_key_toggled # returns if they key is toggled bool is_key_toggled(<e_keys> key_code) Fields Description key_code e_keys key code Example local key_toggled = input . is_key_toggled ( e_keys . KEY_C ) if ( key_toggled ) then print ( \"key C toggled\" ) end is_key_pressed # returns if they key was just pressed bool is_key_pressed(<e_keys> key_code) Fields Description key_code e_keys key code Example local key_pressed = input . is_key_pressed ( e_keys . KEY_C ) if ( key_pressed ) then print ( \"key C pressed\" ) end is_key_released # returns if current key was just released bool is_key_released(<e_keys> key_code) Fields Description key_code e_keys key code enum Example local key_released = input . is_key_released ( e_keys . KEY_C ) if ( key_released ) then print ( \"key C released\" ) end is_key_held # returns if current key is held bool is_key_held(<e_keys> key_code) Fields Description key_code e_keys key code enum Example local key_held = input . is_key_held ( e_keys . KEY_C ) if ( key_held ) then print ( \"key C held\" ) end get_time_held # returns how long a key was held for float get_time_held(<e_keys> key_code) Fields Description key_code e_keys key code enum Example print ( input . get_time_held ( e_button_codes . KEY_C )) -- prints time held get_scroll_delta # returns mouse scroll delta int get_scroll_delta() Example print ( input . get_scroll_delta ()) -- print scroll delta get_key_name # returns the key name for the key id string get_key_name(<e_keys> key) block # blocks input for the next input tick void block()","title":"input"},{"location":"api_functions/input/#input","text":"","title":"input"},{"location":"api_functions/input/#find_key_bound_to_binding","text":"returns key bound to a csgo setting e_keys find_key_bound_to_binding(<string> setting_name) Fields Description setting_name string setting name","title":"find_key_bound_to_binding"},{"location":"api_functions/input/#get_mouse_pos","text":"returns x and y coordinates of the mouse position as a vec2_t vec2_t get_mouse_pos()","title":"get_mouse_pos"},{"location":"api_functions/input/#is_mouse_in_bounds","text":"returns if the mouse is in specified boundss bool is_mouse_in_bounds(<vec2_t> bounds_start, <vec2_t> bounds_end) Fields Description bounds_start vec2_t area bounds start bounds_end vec2_t area bounds end","title":"is_mouse_in_bounds"},{"location":"api_functions/input/#is_key_toggled","text":"returns if they key is toggled bool is_key_toggled(<e_keys> key_code) Fields Description key_code e_keys key code","title":"is_key_toggled"},{"location":"api_functions/input/#is_key_pressed","text":"returns if they key was just pressed bool is_key_pressed(<e_keys> key_code) Fields Description key_code e_keys key code","title":"is_key_pressed"},{"location":"api_functions/input/#is_key_released","text":"returns if current key was just released bool is_key_released(<e_keys> key_code) Fields Description key_code e_keys key code enum","title":"is_key_released"},{"location":"api_functions/input/#is_key_held","text":"returns if current key is held bool is_key_held(<e_keys> key_code) Fields Description key_code e_keys key code enum","title":"is_key_held"},{"location":"api_functions/input/#get_time_held","text":"returns how long a key was held for float get_time_held(<e_keys> key_code) Fields Description key_code e_keys key code enum","title":"get_time_held"},{"location":"api_functions/input/#get_scroll_delta","text":"returns mouse scroll delta int get_scroll_delta()","title":"get_scroll_delta"},{"location":"api_functions/input/#get_key_name","text":"returns the key name for the key id string get_key_name(<e_keys> key)","title":"get_key_name"},{"location":"api_functions/input/#block","text":"blocks input for the next input tick void block()","title":"block"},{"location":"api_functions/materials/","text":"materials # find # Returns material object from name material_t find(<string> material_name) Fields Description material_name string name of material Example local material = materials . find ( \"material_name\" ) material : color_modulate ( 255 , 255 , 255 ) for_each # Allows for iterating material objects void for_each(<function> callback) Fields Description callback function callback with material_object as argument Example materials . for_each ( function ( mat ) print ( mat : get_name ()) end ) create # creates a material from a buffer material_t create(<string> material_name, <string> key_values_buffer) ```","title":"materials"},{"location":"api_functions/materials/#materials","text":"","title":"materials"},{"location":"api_functions/materials/#find","text":"Returns material object from name material_t find(<string> material_name) Fields Description material_name string name of material","title":"find"},{"location":"api_functions/materials/#for_each","text":"Allows for iterating material objects void for_each(<function> callback) Fields Description callback function callback with material_object as argument","title":"for_each"},{"location":"api_functions/materials/#create","text":"creates a material from a buffer material_t create(<string> material_name, <string> key_values_buffer) ```","title":"create"},{"location":"api_functions/memory/","text":"memory # Warning All functions in this table are unsafe and should only be used by people who know what they're doing find_pattern # Returns the address of the specified pattern Note: Patterns are represented in an \"IDA-Style\" format uint find_pattern(<string> module_name, <string> pattern) Fields Description module_name string module name pattern string IDA-style pattern Example local pattern_result = memory . find_pattern ( \"client.dll\" , \"55 15 ?? ?? ?? ??\" ) find_text # Returns the address(es) of where the specified read-only text is referenced uint find_text(<string> module_name, <string> text) uint[] find_text(<string> module_name, <string> text, <bool> find_all = true) Example local head0_reference = memory . find_text ( \"client.dll\" , \"head_0\" ) -- when passing find_all=true it will instead give you an indexed table with all references rather than just the first one local all_head0_references = memory . find_text ( \"client.dll\" , \"head_0\" , true ) create_interface # Returns the address of the interface provided int memory.create_interface(<string> module_name, <string> interface_name) Fields Description module_name string module name interface_name string interface name Example local interface = memory . create_interface ( \"client.dll\" , \"VClientEntityList003\" ) local interface_vft = ffi . cast ( \"void***\" , interface )[ 0 ] get_vfunc # Returns the n-th virtual function of the objects vtable uint get_vfunc(<uint> instance, <int> index) Fields Description instance uint index int Example local vfunc7 = memory . get_vfunc ( instance , 7 )","title":"memory"},{"location":"api_functions/memory/#memory","text":"Warning All functions in this table are unsafe and should only be used by people who know what they're doing","title":"memory"},{"location":"api_functions/memory/#find_pattern","text":"Returns the address of the specified pattern Note: Patterns are represented in an \"IDA-Style\" format uint find_pattern(<string> module_name, <string> pattern) Fields Description module_name string module name pattern string IDA-style pattern","title":"find_pattern"},{"location":"api_functions/memory/#find_text","text":"Returns the address(es) of where the specified read-only text is referenced uint find_text(<string> module_name, <string> text) uint[] find_text(<string> module_name, <string> text, <bool> find_all = true)","title":"find_text"},{"location":"api_functions/memory/#create_interface","text":"Returns the address of the interface provided int memory.create_interface(<string> module_name, <string> interface_name) Fields Description module_name string module name interface_name string interface name","title":"create_interface"},{"location":"api_functions/memory/#get_vfunc","text":"Returns the n-th virtual function of the objects vtable uint get_vfunc(<uint> instance, <int> index) Fields Description instance uint index int","title":"get_vfunc"},{"location":"api_functions/menu/","text":"menu # get_size # Returns size of menu as a vec2_t vec2_t get_size() Example print ( menu . get_size ()) get_pos # Returns screen position of the menu as a vec2_t vec2_t get_pos() Example print ( menu . get_pos ()) is_open # Returns if the menu is open bool is_open() Example print ( \"menu open:\" , menu . is_open ()) find # Returns a control object or an array depending on the elements can return any of the menu controls Note: When getting the value of an element inside any of these types of controls make sure to suffix it with \"#\" and the tab name any find(<string> tab, <string> sub_tab, <string> group_name, <string> element_name) Fields Description tab string tab name sub_tab string sub tab name group_name string group tab name element_name string element name Example local find_lock_layout = menu . find ( \"misc\" , \"main\" , \"config\" , \"lock menu layout\" ) find_lock_layout : set ( true ) -- when referencing a control that has sub-controls (like a colorpicker or keybinds) it will return an indexed table instead local accent_color = menu . find ( \"misc\" , \"main\" , \"config\" , \"accent color\" ) -- accent_color[1] is the text -- accent_color[2] is the color picker -- or, alternatively... local accent_color_text , accent_color_color = unpack ( menu . find ( \"misc\" , \"main\" , \"config\" , \"accent color\" )) -- local glow_enabled , glow_color = unpack ( menu . find ( \"visuals\" , \"esp\" , \"models\" , \"glow#enemy\" )) set_group_column # places the target group in a column text_t set_group_column(<string> group, int column) Fields Description group string group which will be moved to the target column column int Example menu . set_group_column ( \"group\" , 1 ) -- place in left column set_group_visibility # toggles visiblity for a group text_t set_group_column(<string> group, bool visible) Fields Description group string group which will be made visible or not visible bool Example menu . set_group_visibility ( \"group\" , false ) -- hide group Warning Controls should only be created OUTSIDE of callbacks to avoid infinite controls being spawned add_text # Creates a text control and returns it text_t add_text(<string> group, <string> text) Fields Description group string group in which the control will be placed (will be created if it doesnt already exist) text string text Example local text_item = menu . add_text ( \"group\" , \"test\" ) add_checkbox # Creates a checkbox control and returns it checkbox_t add_checkbox(<string> group, <string> name, [optional] <bool> default_value) Fields Description group string group in which the control will be placed (will be created if it doesnt already exist) name string checkbox name checkbox_state bool [optional] default value Example local checkbox_item = menu . add_checkbox ( \"group\" , \"checkyboxy\" , true ) add_selection # Creates a selection control and returns it void add_selection(<string> group, <string> name, <table> items, [optional] <int> visible_items = 6) Fields Description group string group name name string selection name items bool array of items visible_items bool [optional] items to show before showing a scrollbar Example local selection_item = menu . add_selection ( \"group\" , \"selecty\" , { \"element1\" , \"element2\" , \"element3\" }) add_slider # Creates a slider control and returns it slider_t add_slider(<string> group, <string> name, <float> min, <float> max, [optional] <float> step = 1.0, [optional] <int> precision = 0, [optional] <string> suffix ) Fields Description group string group name name string name min float minimum slider value max float maximum slider value step float [optional] precision int [optional] suffix string [optional] Example local slider_item = menu . add_slider ( \"group\" , \"slidy\" , 1 , 10 ) add_button # Creates a button control and returns it button_t button(<string> group, <string> name, <function> callback ) Fields Description group string group name name string button name callback function function executed on click Example menu . add_button ( \"group\" , \"text\" , function () print ( \"hi\" ) end ) add_separator # Creates a separator control and returns it void menu.add_separator(<string> group) Fields Description group string group name Example menu . add_separator ( \"group\" ) add_list # Creates a list control and returns it list_t add_list(<string> group, <string> name, <table> items, [optional] <int> visible_items = 8) Fields Description group string group name name string list name items table array of items visible_items table [optional] items to show Example local list_item = menu . add_list ( \"group\" , \"name\" , { \"element1\" , \"element2\" , \"element3\" }) add_text_input # Creates a text input control and returns it text_input_t add_text_input(<string> group, <string> name) Fields Description group string group name name string text input name Example local text_input_item = menu . add_text_input ( \"group\" , \"texty inputty\" ) add_multi_selection # Creates a multi selection control and returns it multi_selection_t add_multi_selection(<string> group, <string> name, <table> items, [optional] <int> visible_items = 6) Fields Description group string group name name string control name items string array of items visible_items string [optional] Example menu . add_multi_selection ( \"test\" , \"test2\" ,{ \"hi\" , \"test\" , \"prim\" , \"cool\" })","title":"menu"},{"location":"api_functions/menu/#menu","text":"","title":"menu"},{"location":"api_functions/menu/#get_size","text":"Returns size of menu as a vec2_t vec2_t get_size()","title":"get_size"},{"location":"api_functions/menu/#get_pos","text":"Returns screen position of the menu as a vec2_t vec2_t get_pos()","title":"get_pos"},{"location":"api_functions/menu/#is_open","text":"Returns if the menu is open bool is_open()","title":"is_open"},{"location":"api_functions/menu/#find","text":"Returns a control object or an array depending on the elements can return any of the menu controls Note: When getting the value of an element inside any of these types of controls make sure to suffix it with \"#\" and the tab name any find(<string> tab, <string> sub_tab, <string> group_name, <string> element_name) Fields Description tab string tab name sub_tab string sub tab name group_name string group tab name element_name string element name","title":"find"},{"location":"api_functions/menu/#set_group_column","text":"places the target group in a column text_t set_group_column(<string> group, int column) Fields Description group string group which will be moved to the target column column int","title":"set_group_column"},{"location":"api_functions/menu/#set_group_visibility","text":"toggles visiblity for a group text_t set_group_column(<string> group, bool visible) Fields Description group string group which will be made visible or not visible bool","title":"set_group_visibility"},{"location":"api_functions/menu/#add_text","text":"Creates a text control and returns it text_t add_text(<string> group, <string> text) Fields Description group string group in which the control will be placed (will be created if it doesnt already exist) text string text","title":"add_text"},{"location":"api_functions/menu/#add_checkbox","text":"Creates a checkbox control and returns it checkbox_t add_checkbox(<string> group, <string> name, [optional] <bool> default_value) Fields Description group string group in which the control will be placed (will be created if it doesnt already exist) name string checkbox name checkbox_state bool [optional] default value","title":"add_checkbox"},{"location":"api_functions/menu/#add_selection","text":"Creates a selection control and returns it void add_selection(<string> group, <string> name, <table> items, [optional] <int> visible_items = 6) Fields Description group string group name name string selection name items bool array of items visible_items bool [optional] items to show before showing a scrollbar","title":"add_selection"},{"location":"api_functions/menu/#add_slider","text":"Creates a slider control and returns it slider_t add_slider(<string> group, <string> name, <float> min, <float> max, [optional] <float> step = 1.0, [optional] <int> precision = 0, [optional] <string> suffix ) Fields Description group string group name name string name min float minimum slider value max float maximum slider value step float [optional] precision int [optional] suffix string [optional]","title":"add_slider"},{"location":"api_functions/menu/#add_button","text":"Creates a button control and returns it button_t button(<string> group, <string> name, <function> callback ) Fields Description group string group name name string button name callback function function executed on click","title":"add_button"},{"location":"api_functions/menu/#add_separator","text":"Creates a separator control and returns it void menu.add_separator(<string> group) Fields Description group string group name","title":"add_separator"},{"location":"api_functions/menu/#add_list","text":"Creates a list control and returns it list_t add_list(<string> group, <string> name, <table> items, [optional] <int> visible_items = 8) Fields Description group string group name name string list name items table array of items visible_items table [optional] items to show","title":"add_list"},{"location":"api_functions/menu/#add_text_input","text":"Creates a text input control and returns it text_input_t add_text_input(<string> group, <string> name) Fields Description group string group name name string text input name","title":"add_text_input"},{"location":"api_functions/menu/#add_multi_selection","text":"Creates a multi selection control and returns it multi_selection_t add_multi_selection(<string> group, <string> name, <table> items, [optional] <int> visible_items = 6) Fields Description group string group name name string control name items string array of items visible_items string [optional]","title":"add_multi_selection"},{"location":"api_functions/player_resource/","text":"player_resource # get_prop # Returns prop from CCSPlayerResource any get_prop(<string> prop_name, [optional] <int> array_index) Fields Description prop_name function CCSPlayerResource prop name array_index int [optional] array index to use if the prop is an array Example print ( \"damage total\" , player_resource . get_prop ( \"m_iMatchStats_Damage_Total\" )) set_prop # Sets a prop from CCSPlayerResource void set_prop(<string> prop_name, <any> value, [optional] <int> array_index) Fields Description prop_name function CCSPlayerResource prop name value any value to set the prop to array_index any [optional] array index to use if the prop is an array Example player_resource . set_prop ( \"m_iMatchStats_Damage_Total\" , 400 )","title":"player_resource"},{"location":"api_functions/player_resource/#player_resource","text":"","title":"player_resource"},{"location":"api_functions/player_resource/#get_prop","text":"Returns prop from CCSPlayerResource any get_prop(<string> prop_name, [optional] <int> array_index) Fields Description prop_name function CCSPlayerResource prop name array_index int [optional] array index to use if the prop is an array","title":"get_prop"},{"location":"api_functions/player_resource/#set_prop","text":"Sets a prop from CCSPlayerResource void set_prop(<string> prop_name, <any> value, [optional] <int> array_index) Fields Description prop_name function CCSPlayerResource prop name value any value to set the prop to array_index any [optional] array index to use if the prop is an array","title":"set_prop"},{"location":"api_functions/ragebot/","text":"ragebot # get_active_cfg # Returns the current active config's index e_ragebot_cfg ragebot.get_active_cfg() Example print ( ragebot . get_active_cfg ()) -- returns active cfg index get_autopeek_pos # Returns the current world position for the auto peek circle or nil vec3_t ragebot.get_autopeek_pos() Example print ( ragebot . get_autopeek_pos ()) -- returns autopeek vec3_t or nil","title":"ragebot"},{"location":"api_functions/ragebot/#ragebot","text":"","title":"ragebot"},{"location":"api_functions/ragebot/#get_active_cfg","text":"Returns the current active config's index e_ragebot_cfg ragebot.get_active_cfg()","title":"get_active_cfg"},{"location":"api_functions/ragebot/#get_autopeek_pos","text":"Returns the current world position for the auto peek circle or nil vec3_t ragebot.get_autopeek_pos()","title":"get_autopeek_pos"},{"location":"api_functions/render/","text":"render # Info the render.* functions can only be called from within a few select callbacks, make sure you check if the callback youre in right now supports it create_font # Creates a font object Warning Only call this OUTSIDE of callbacks to prevent infinite font creation and crashing font_t create_font(<string> font_name, <int> font_size, <int> font_weight, [optional] <e_font_flags> font_flags...) Fields Description font_name string render font name font_size int size of created font font_weight int weight of created font font_flags e_font_flags [optional] [variadic] font flags Example local main_font = render . create_font ( \"Arial\" , 20 , 600 , e_font_flags . ANTIALIAS , e_font_flags . ITALIC , e_font_flags . DROPSHADOW ) text # Renders text void text(<font_t> font_object, <string> text, <vec2_t> screen_pos, <color_t> text_color, [optional] <bool> centered) Fields Description font_object font_t font object text string text to render screen_pos vec2_t position of text text_color color_t color of text centered bool should text be centered Example render . text ( main_font , \"test123\" , vec2_t ( 2 , 0 ), color_t ( 255 , 255 , 255 , 255 )) get_text_size # Returns size of text as a vec2_t vec2_t get_text_size(<font_t> font_object, <string> text) Fields Description font_object font_t render font object text string text to measure Example local text_size = render . get_text_size ( main_font , \"Hello World\" ) print ( text_size ) weapon_icon # renders the weapon icon of the specified weapon id void weapon_icon(<int> weapon_id, <vec2_t> screen_pos, <color_t> text_color, [optional] <bool> centered) Fields Description weapon_id int weapon id to render screen_pos vec2_t position of text text_color color_t color of text centered bool should text be centered Example render . weapon_icon ( e_items . WEAPON_AK47 vec2_t ( 2 , 0 ), color_t ( 255 , 255 , 255 , 255 )) get_default_font # Returns the cheat's default font font_t get_default_font() Example local default_font = render . get_default_font () callbacks . add ( e_callbacks . PAINT , function () render . text ( default_font , \"Hi\" , vec2_t ( 0 , 25 ), color_t ( 255 , 255 , 255 )) end ) push_clip # Pushes a clip onto render elements void push_clip(<vec2_t> start, <vec2_t> size) Fields Description start vec2_t clip start size vec2_t clip size Example render . push_clip ( vec2_t ( 100 , 100 ), vec2_t ( 100 , 100 )) pop_clip # Stops all other render calls from being clipped void pop_clip() Example render . push_clip ( vec2_t ( 100 , 100 ), vec2_t ( 100 , 100 )) render . rect_filled ( vec2_t ( 100 , 100 ), vec2_t ( 200 , 100 ), color_t ( 255 , 255 , 255 , 255 )) -- this rectangle will be cut off in the middle render . pop_clip () -- you always have to pop it to stop other render.* calls from being clipped push_alpha_modifier # Pushes a alpha modifier onto render elements void push_alpha_modifier(<float> alpha_modifier) Fields Description alpha_modifier float alpha modifier Example render . push_alpha_modifier ( 0.5 ) pop_alpha_modifier # Stops all other elements from having their alpha modified void pop_alpha_modifier() Example render . push_alpha_modifier ( 0.5 ) render . rect_filled ( vec2_t ( 100 , 100 ), vec2_t ( 100 , 100 ), color_t ( 255 , 255 , 255 , 200 )) -- this will draw with only 100 alpha render . pop_alpha_modifier () -- you always have to pop the alpha modifier to end it get_screen_size # Returns current screen size as a vec2_t vec2_t get_screen_size() Example local screen_size = render . get_screen_size () print ( screen_size ) line # Renders a 2D line void line(<vec2_t> from, <vec2_t> to, <color_t> color ) Fields Description from vec2_t starting point to vec2_t end point color color_t line color Example render . line ( vec2_t ( 100 , 50 ), vec2_t ( 150 , 75 ), color_t ( 255 , 0 , 0 )) rect # Renders a 2D rectangle void rect(<vec2_t> screen_coords, <vec2_t> rectangle_size, <color_t> color, [optional] <float> rounding) Fields Description screen_coords vec2_t x and y coordinates rectangle_size vec2_t rectangle width and height color color_t rectangle color rounding float rectangle rounding Example render . rect ( vec2_t ( 100 , 50 ), vec2_t ( 150 , 75 ), color_t ( 255 , 0 , 0 )) rect_filled # Renders a 2D filled rectangle void rect_filled(<vec2_t> screen_coords, <vec2_t> rectangle_size, <color_t> color, [optional] <float> rounding) Fields Description screen_coords vec2_t x and y coordinates rectangle_size vec2_t rectangle width and height color color_t rectangle fill color rounding float rectangle fill rounding Example render . rect_filled ( vec2_t ( 100 , 50 ), vec2_t ( 150 , 75 ), color_t ( 255 , 0 , 0 )) rect_fade # Renders a 2D rectangle with a gradient void rect_fade(<vec2_t> screen_coords, <vec2_t> rectangle_size, <color_t> color_start, <color_t> color_end, [optional] <bool> horizontal) Fields Description screen_coords vec2_t x and y coordinates rectangle_size vec2_t rectangle width and height color_start color_t rectangle gradient color start color_end color_t rectangle gradient color end horizontal bool [optional] makes the gradient horizontal Example render . rect_fade ( vec2_t ( 100 , 50 ), vec2_t ( 150 , 75 ), color_t ( 255 , 0 , 0 ), color_t ( 0 , 255 , 0 )) triangle # Renders a 2D triangle void triangle(<vec2_t> screen_coords, <int> size, <color_t> color, [optional] <int> rotation) Fields Description screen_coords vec2_t x and y coordinates size int triangle size color color_t triangle color rotation int [optional] triangle rotation Example render . triangle ( vec2_t . new ( 100 , 500 ), 50 , color_t . new ( 255 , 0 , 0 ), 90 ) triangle_filled # Renders a 2D triangle void triangle_filled(<vec2_t> screen_coords, <int> size, <color_t> color, [optional] <int> rotation) Fields Description screen_coords vec2_t x and y coordinates size int triangle size color color_t triangle color rotation int [optional] triangle rotation Example render . triangle_filled ( vec2_t . new ( 100 , 500 ), 50 , color_t . new ( 255 , 0 , 0 ), 90 ) circle # Renders a 2D circle void circle(<vec2_t> screen_coords, <int> radius, <color_t> color, [optional] <int> thickness) Fields Description screen_coords vec2_t x and y coordinates radius int circle size color color_t circle color thickness int Example render . circle ( vec2_t . new ( 125 , 575 ), 25 , color_t . new ( 255 , 0 , 0 )) circle_filled # Renders a 2D filled circle void circle_filled(<vec2_t> screen_coords, <int> radius, <color_t> color) Fields Description screen_coords vec2_t x and y coordinates radius int circle size color color_t circle fill color Example render . circle_filled ( vec2_t . new ( 125 , 575 ), 25 , color_t . new ( 255 , 0 , 0 )) progress_circle # Renders a 2D progress_circle void progress_circle(<vec2_t> screen_coords, <int> radius, <color_t> color, <int> width, <float> progress) Fields Description screen_coords vec2_t x and y coordinates radius int progress bar size color color_t progress bar color width int progress bar width progress float progress value Example render . progress_circle ( vec2_t . new ( 125 , 650 ), 25 , color_t . new ( 255 , 0 , 0 ), 2 , 0.75 ) polygon # Renders a 2D polygon void polygon([table] <vec2_t> points, <color_t> color) Fields Description points [table] vec2_t array of 2D points color color_t polygon color Example render . polygon ({ vec2_t ( 100 , 100 ), vec2_t ( 150 , 100 ), vec2_t ( 150 , 200 ), vec2_t ( 100 , 200 ), vec2_t ( 50 , 150 ), vec2_t ( 100 , 200 ), vec2_t ( 150 , 200 ), vec2_t ( 150 , 100 )}, color_t ( 255 , 255 , 255 )) polyline # Renders a 2D polyline void polyline([table] <vec2_t> points, <color_t> color) Fields Description points [table] vec2_t array of 2D points color color_t polygon color Example render . polyline ({ vec2_t ( 100 , 100 ), vec2_t ( 150 , 100 ), vec2_t ( 150 , 200 ), vec2_t ( 100 , 200 ), vec2_t ( 50 , 150 ), vec2_t ( 100 , 200 ), vec2_t ( 150 , 200 ), vec2_t ( 150 , 100 )}, color_t ( 255 , 255 , 255 )) world_to_screen # Returns 2D coordinates for a 3D world point or nil on failure vec2_t world_to_screen(<vec3_t> world_position) Fields Description world_position vec3_t x, y, z coordinates Example local screen_pos = render . world_to_screen ( world_position ) if screen_pos ~= nil then print ( screen_pos ) --unpacks 2D vector end load_image # loads an image from a path and returns a texture supports .jpg, .jpeg, .png, .svg, .tga, .bmp texture_t load_image(<string> path) load_image_buffer # loads an image from the raw file (has to include header) and returns a texture supports .jpg, .jpeg, .png, .svg, .tga, .bmp texture_t load_image_buffer(<string> raw_file) texture # renders a texture received from load_image or load_image_buffer void texture(<int> texture_id, <vec2_t> screen_pos, <vec2_t> size, [optional] <color_t> color_tint) Example local img = render . load_image ( \"ak47.svg\" ) print ( img . size . x , img . size . y ) function on_paint () render . texture ( img . id , vec2_t ( 100 , 100 ), img . size ) end","title":"render"},{"location":"api_functions/render/#render","text":"Info the render.* functions can only be called from within a few select callbacks, make sure you check if the callback youre in right now supports it","title":"render"},{"location":"api_functions/render/#create_font","text":"Creates a font object Warning Only call this OUTSIDE of callbacks to prevent infinite font creation and crashing font_t create_font(<string> font_name, <int> font_size, <int> font_weight, [optional] <e_font_flags> font_flags...) Fields Description font_name string render font name font_size int size of created font font_weight int weight of created font font_flags e_font_flags [optional] [variadic] font flags","title":"create_font"},{"location":"api_functions/render/#text","text":"Renders text void text(<font_t> font_object, <string> text, <vec2_t> screen_pos, <color_t> text_color, [optional] <bool> centered) Fields Description font_object font_t font object text string text to render screen_pos vec2_t position of text text_color color_t color of text centered bool should text be centered","title":"text"},{"location":"api_functions/render/#get_text_size","text":"Returns size of text as a vec2_t vec2_t get_text_size(<font_t> font_object, <string> text) Fields Description font_object font_t render font object text string text to measure","title":"get_text_size"},{"location":"api_functions/render/#weapon_icon","text":"renders the weapon icon of the specified weapon id void weapon_icon(<int> weapon_id, <vec2_t> screen_pos, <color_t> text_color, [optional] <bool> centered) Fields Description weapon_id int weapon id to render screen_pos vec2_t position of text text_color color_t color of text centered bool should text be centered","title":"weapon_icon"},{"location":"api_functions/render/#get_default_font","text":"Returns the cheat's default font font_t get_default_font()","title":"get_default_font"},{"location":"api_functions/render/#push_clip","text":"Pushes a clip onto render elements void push_clip(<vec2_t> start, <vec2_t> size) Fields Description start vec2_t clip start size vec2_t clip size","title":"push_clip"},{"location":"api_functions/render/#pop_clip","text":"Stops all other render calls from being clipped void pop_clip()","title":"pop_clip"},{"location":"api_functions/render/#push_alpha_modifier","text":"Pushes a alpha modifier onto render elements void push_alpha_modifier(<float> alpha_modifier) Fields Description alpha_modifier float alpha modifier","title":"push_alpha_modifier"},{"location":"api_functions/render/#pop_alpha_modifier","text":"Stops all other elements from having their alpha modified void pop_alpha_modifier()","title":"pop_alpha_modifier"},{"location":"api_functions/render/#get_screen_size","text":"Returns current screen size as a vec2_t vec2_t get_screen_size()","title":"get_screen_size"},{"location":"api_functions/render/#line","text":"Renders a 2D line void line(<vec2_t> from, <vec2_t> to, <color_t> color ) Fields Description from vec2_t starting point to vec2_t end point color color_t line color","title":"line"},{"location":"api_functions/render/#rect","text":"Renders a 2D rectangle void rect(<vec2_t> screen_coords, <vec2_t> rectangle_size, <color_t> color, [optional] <float> rounding) Fields Description screen_coords vec2_t x and y coordinates rectangle_size vec2_t rectangle width and height color color_t rectangle color rounding float rectangle rounding","title":"rect"},{"location":"api_functions/render/#rect_filled","text":"Renders a 2D filled rectangle void rect_filled(<vec2_t> screen_coords, <vec2_t> rectangle_size, <color_t> color, [optional] <float> rounding) Fields Description screen_coords vec2_t x and y coordinates rectangle_size vec2_t rectangle width and height color color_t rectangle fill color rounding float rectangle fill rounding","title":"rect_filled"},{"location":"api_functions/render/#rect_fade","text":"Renders a 2D rectangle with a gradient void rect_fade(<vec2_t> screen_coords, <vec2_t> rectangle_size, <color_t> color_start, <color_t> color_end, [optional] <bool> horizontal) Fields Description screen_coords vec2_t x and y coordinates rectangle_size vec2_t rectangle width and height color_start color_t rectangle gradient color start color_end color_t rectangle gradient color end horizontal bool [optional] makes the gradient horizontal","title":"rect_fade"},{"location":"api_functions/render/#triangle","text":"Renders a 2D triangle void triangle(<vec2_t> screen_coords, <int> size, <color_t> color, [optional] <int> rotation) Fields Description screen_coords vec2_t x and y coordinates size int triangle size color color_t triangle color rotation int [optional] triangle rotation","title":"triangle"},{"location":"api_functions/render/#triangle_filled","text":"Renders a 2D triangle void triangle_filled(<vec2_t> screen_coords, <int> size, <color_t> color, [optional] <int> rotation) Fields Description screen_coords vec2_t x and y coordinates size int triangle size color color_t triangle color rotation int [optional] triangle rotation","title":"triangle_filled"},{"location":"api_functions/render/#circle","text":"Renders a 2D circle void circle(<vec2_t> screen_coords, <int> radius, <color_t> color, [optional] <int> thickness) Fields Description screen_coords vec2_t x and y coordinates radius int circle size color color_t circle color thickness int","title":"circle"},{"location":"api_functions/render/#circle_filled","text":"Renders a 2D filled circle void circle_filled(<vec2_t> screen_coords, <int> radius, <color_t> color) Fields Description screen_coords vec2_t x and y coordinates radius int circle size color color_t circle fill color","title":"circle_filled"},{"location":"api_functions/render/#progress_circle","text":"Renders a 2D progress_circle void progress_circle(<vec2_t> screen_coords, <int> radius, <color_t> color, <int> width, <float> progress) Fields Description screen_coords vec2_t x and y coordinates radius int progress bar size color color_t progress bar color width int progress bar width progress float progress value","title":"progress_circle"},{"location":"api_functions/render/#polygon","text":"Renders a 2D polygon void polygon([table] <vec2_t> points, <color_t> color) Fields Description points [table] vec2_t array of 2D points color color_t polygon color","title":"polygon"},{"location":"api_functions/render/#polyline","text":"Renders a 2D polyline void polyline([table] <vec2_t> points, <color_t> color) Fields Description points [table] vec2_t array of 2D points color color_t polygon color","title":"polyline"},{"location":"api_functions/render/#world_to_screen","text":"Returns 2D coordinates for a 3D world point or nil on failure vec2_t world_to_screen(<vec3_t> world_position) Fields Description world_position vec3_t x, y, z coordinates","title":"world_to_screen"},{"location":"api_functions/render/#load_image","text":"loads an image from a path and returns a texture supports .jpg, .jpeg, .png, .svg, .tga, .bmp texture_t load_image(<string> path)","title":"load_image"},{"location":"api_functions/render/#load_image_buffer","text":"loads an image from the raw file (has to include header) and returns a texture supports .jpg, .jpeg, .png, .svg, .tga, .bmp texture_t load_image_buffer(<string> raw_file)","title":"load_image_buffer"},{"location":"api_functions/render/#texture","text":"renders a texture received from load_image or load_image_buffer void texture(<int> texture_id, <vec2_t> screen_pos, <vec2_t> size, [optional] <color_t> color_tint)","title":"texture"},{"location":"api_functions/trace/","text":"trace # line # Traces a line and returns the trace data trace_result_t line(<vec3_t> start, <vec3_t> end, [optional] <entity_t> ignore_entity, [optional] <int> trace_mask = MASK_SOLID) Fields Description start vec3_t trace start end vec3_t trace end ignore_entity entity_t [optional] entity to skip trace_mask int [optional] trace mask or MASK_SOLID Example local trace_result = trace . line ( from , to , local_player ) if ( trace_result . entity ~= nil ) then print ( \"hit:\" , trace_result . entity : get_name ()) end hull # Performs a hull trace and returns the trace data trace_result_t hull(<vec3_t> start, <vec3_t> end, <vec3_t> hull_mins, <vec3_t> hull_maxs, [optional] <entity_t> ignore_entity, [optional] <int> trace_mask = MASK_SOLID) Fields Description start vec3_t trace start end vec3_t trace end hull_mins vec3_t trace hull minimum hull_maxs vec3_t trace hull maximum ignore_entity entity_t [optional] entity to skip trace_mask int [optional] trace mask or MASK_SOLID Example local trace_result = trace . hull ( from , to , box_mins , box_maxs , local_player ) if ( trace_result . entity ~= nil ) then print ( \"hit:\" , trace_result . entity : get_name ()) end bullet # Performs a bullet trace (autowall) and returns the bullet data bullet_data_t bullet(<vec3_t> start, <vec3_t> end, [optional] <entity_t> attacker = local_player, [optional] <entity_t> target) Fields Description start vec3_t trace start end vec3_t trace end attacker entity_t [optional] trace from entity, local_player by default target entity_t [optional] trace to entity Example local trace_result = trace . bullet ( from , to , local_player , enemy ) if ( trace_result . valid and trace_result . damage > 0 ) then print ( \"player can be damaged\" ) end","title":"trace"},{"location":"api_functions/trace/#trace","text":"","title":"trace"},{"location":"api_functions/trace/#line","text":"Traces a line and returns the trace data trace_result_t line(<vec3_t> start, <vec3_t> end, [optional] <entity_t> ignore_entity, [optional] <int> trace_mask = MASK_SOLID) Fields Description start vec3_t trace start end vec3_t trace end ignore_entity entity_t [optional] entity to skip trace_mask int [optional] trace mask or MASK_SOLID","title":"line"},{"location":"api_functions/trace/#hull","text":"Performs a hull trace and returns the trace data trace_result_t hull(<vec3_t> start, <vec3_t> end, <vec3_t> hull_mins, <vec3_t> hull_maxs, [optional] <entity_t> ignore_entity, [optional] <int> trace_mask = MASK_SOLID) Fields Description start vec3_t trace start end vec3_t trace end hull_mins vec3_t trace hull minimum hull_maxs vec3_t trace hull maximum ignore_entity entity_t [optional] entity to skip trace_mask int [optional] trace mask or MASK_SOLID","title":"hull"},{"location":"api_functions/trace/#bullet","text":"Performs a bullet trace (autowall) and returns the bullet data bullet_data_t bullet(<vec3_t> start, <vec3_t> end, [optional] <entity_t> attacker = local_player, [optional] <entity_t> target) Fields Description start vec3_t trace start end vec3_t trace end attacker entity_t [optional] trace from entity, local_player by default target entity_t [optional] trace to entity","title":"bullet"},{"location":"api_functions/user/","text":"user # name # Returns player forum name string user.name Example print ( \"forum name:\" , user . name ) -- ex: Classy uid # Returns player forum uid int user.uid Example print ( \"forum uid:\" , user . uid ) --ex: 391","title":"user"},{"location":"api_functions/user/#user","text":"","title":"user"},{"location":"api_functions/user/#name","text":"Returns player forum name string user.name","title":"name"},{"location":"api_functions/user/#uid","text":"Returns player forum uid int user.uid","title":"uid"},{"location":"api_globals/cvars/","text":"to access any convar_t object simply append the convars name to cvars.* local skyname = cvars . sv_skyname print ( skyname : get_string ())","title":"cvars"},{"location":"api_globals/user/","text":"printf ( \"hello im\" , user . name , \"with uid\" , user . uid ) Fields # Field Description name string username uid int uid","title":"user"},{"location":"api_globals/user/#fields","text":"Field Description name string username uid int uid","title":"Fields"},{"location":"api_menu_controls/button_t/","text":"local function callback_fn () print ( \"callback\" ) end local button = menu . add_button ( \"group\" , \"name\" , callback_fn ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example button : set_visible ( true )","title":"button_t"},{"location":"api_menu_controls/button_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/checkbox_t/","text":"local checkbox = menu . add_checkbox ( \"group\" , \"name\" ) get # returns whether this checkbox is enabled bool get() Example print ( checkbox : get ()) set # sets whether this checkbox is enabled void set(<bool> state) Example checkbox : set ( false ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example checkbox : set_visible ( true ) add_color_picker # adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha) Example local colly = checkbox : add_color_picker ( \"bruh color\" ) add_keybind # adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key) Example local keybind = checkbox : add_keybind ( \"bruh key\" )","title":"checkbox_t"},{"location":"api_menu_controls/checkbox_t/#get","text":"returns whether this checkbox is enabled bool get()","title":"get"},{"location":"api_menu_controls/checkbox_t/#set","text":"sets whether this checkbox is enabled void set(<bool> state)","title":"set"},{"location":"api_menu_controls/checkbox_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/checkbox_t/#add_color_picker","text":"adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha)","title":"add_color_picker"},{"location":"api_menu_controls/checkbox_t/#add_keybind","text":"adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key)","title":"add_keybind"},{"location":"api_menu_controls/color_picker_t/","text":"local checkbox = menu . add_checkbox ( \"group\" , \"name\" ) local colly = checkbox : add_color_picker ( \"bruh color\" ) get # returns the current color color_t get() Example print ( colly : get ()) set # sets the current color void set(<color_t> col) Example colly : set ( color_t ( 0 , 255 , 0 )) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example colly : set_visible ( true )","title":"color_picker_t"},{"location":"api_menu_controls/color_picker_t/#get","text":"returns the current color color_t get()","title":"get"},{"location":"api_menu_controls/color_picker_t/#set","text":"sets the current color void set(<color_t> col)","title":"set"},{"location":"api_menu_controls/color_picker_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/keybind_t/","text":"local checkbox = menu . add_checkbox ( \"group\" , \"name\" ) local keybind = checkbox : add_keybind ( \"bruh color\" ) get # returns if the keybind is active (depending on the current mode) bool get() Example print ( keybind : get ()) get_key # returns the current key bound to the keybind e_keys get_key() Example print ( keybind : get_key ()) get_mode # returns the current keybind mode e_keybind_modes get_mode() Example print ( keybind : get_mode ()) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example keybind : set_visible ( true )","title":"keybind_t"},{"location":"api_menu_controls/keybind_t/#get","text":"returns if the keybind is active (depending on the current mode) bool get()","title":"get"},{"location":"api_menu_controls/keybind_t/#get_key","text":"returns the current key bound to the keybind e_keys get_key()","title":"get_key"},{"location":"api_menu_controls/keybind_t/#get_mode","text":"returns the current keybind mode e_keybind_modes get_mode()","title":"get_mode"},{"location":"api_menu_controls/keybind_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/list_t/","text":"local list = menu . add_list ( \"group\" , \"name\" , { \"item1\" , \"item2\" , \"item3\" }) get # returns the current active item index int get() Example print ( list : get ()) get_active_item_name # returns the current active item name string get_active_item_name() Example print ( list : get_active_item_name ()) set # sets the active item index void set(<int> active_item_index) Example list : set ( 1 ) -- set active item to \"item1\" set_by_name # sets the active item index by name void set_by_name(<string> item_name) Example list : set_by_name ( \"item1\" ) -- set active item to \"item1\" get_item_name # returns the item name for the passed index string get_item_name(<int> item) Example print ( list : get_item_name ( 1 )) -- prints \"item1\" get_items # returns an indexed table of all the items string[] get_items() Example local items = list : get_items () print ( items [ 0 ], items [ 1 ]) -- prints \"item1\" and \"item2\" set_items # overrides the entire list of items void set_items(string[] items) Example list : set_items ({ \"new item1\" , \"new item2\" }) add_item # adds an item to the list void add_item(string item) Example list : add_item ( \"item4\" ) remove_item # removes an item from the list void remove_item(string item) Example list : remove_item ( \"item1\" ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example list : set_visible ( true ) add_color_picker # adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha) Example local colly = list : add_color_picker ( \"bruh color\" ) add_keybind # adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key) Example local keybind = list : add_keybind ( \"bruh key\" )","title":"list_t"},{"location":"api_menu_controls/list_t/#get","text":"returns the current active item index int get()","title":"get"},{"location":"api_menu_controls/list_t/#get_active_item_name","text":"returns the current active item name string get_active_item_name()","title":"get_active_item_name"},{"location":"api_menu_controls/list_t/#set","text":"sets the active item index void set(<int> active_item_index)","title":"set"},{"location":"api_menu_controls/list_t/#set_by_name","text":"sets the active item index by name void set_by_name(<string> item_name)","title":"set_by_name"},{"location":"api_menu_controls/list_t/#get_item_name","text":"returns the item name for the passed index string get_item_name(<int> item)","title":"get_item_name"},{"location":"api_menu_controls/list_t/#get_items","text":"returns an indexed table of all the items string[] get_items()","title":"get_items"},{"location":"api_menu_controls/list_t/#set_items","text":"overrides the entire list of items void set_items(string[] items)","title":"set_items"},{"location":"api_menu_controls/list_t/#add_item","text":"adds an item to the list void add_item(string item)","title":"add_item"},{"location":"api_menu_controls/list_t/#remove_item","text":"removes an item from the list void remove_item(string item)","title":"remove_item"},{"location":"api_menu_controls/list_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/list_t/#add_color_picker","text":"adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha)","title":"add_color_picker"},{"location":"api_menu_controls/list_t/#add_keybind","text":"adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key)","title":"add_keybind"},{"location":"api_menu_controls/multi_selection_t/","text":"local multi_selection = menu . add_multi_selection ( \"group\" , \"name\" , { \"item1\" , \"item2\" , \"item3\" }) get # returns whether the item is active, can either be indexed or by name bool get(<int/string> item) Example print ( multi_selection : get ( 1 )) -- check if \"item1\" is active -- or... print ( multi_selection : get ( \"item1\" )) -- check if \"item1\" is active set # sets whether an item is active, can either be indexed or by name void set(<int/string> item, bool value) Example print ( multi_selection : set ( 1 , true )) -- set \"item1\" to active -- or... print ( multi_selection : set ( \"item1\" , true )) -- set \"item1\" to active get_item_name # returns the item name for the passed index string get_item_name(<int> item) Example print ( multi_selection : get_item_name ( 1 )) -- prints \"item1\" get_items # returns an indexed table of all the items string[] get_items() Example local items = multi_selection : get_items () print ( items [ 0 ], items [ 1 ]) -- prints \"item1\" and \"item2\" set_items # overrides the entire list of items void set_items(string[] items) Example multi_selection : set_items ({ \"new item1\" , \"new item2\" }) add_item # adds an item to the list void add_item(string item) Example multi_selection : add_item ( \"item4\" ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example multi_selection : set_visible ( true ) add_color_picker # adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha) Example local colly = multi_selection : add_color_picker ( \"bruh color\" ) add_keybind # adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key) Example local keybind = multi_selection : add_keybind ( \"bruh key\" )","title":"multi_selection_t"},{"location":"api_menu_controls/multi_selection_t/#get","text":"returns whether the item is active, can either be indexed or by name bool get(<int/string> item)","title":"get"},{"location":"api_menu_controls/multi_selection_t/#set","text":"sets whether an item is active, can either be indexed or by name void set(<int/string> item, bool value)","title":"set"},{"location":"api_menu_controls/multi_selection_t/#get_item_name","text":"returns the item name for the passed index string get_item_name(<int> item)","title":"get_item_name"},{"location":"api_menu_controls/multi_selection_t/#get_items","text":"returns an indexed table of all the items string[] get_items()","title":"get_items"},{"location":"api_menu_controls/multi_selection_t/#set_items","text":"overrides the entire list of items void set_items(string[] items)","title":"set_items"},{"location":"api_menu_controls/multi_selection_t/#add_item","text":"adds an item to the list void add_item(string item)","title":"add_item"},{"location":"api_menu_controls/multi_selection_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/multi_selection_t/#add_color_picker","text":"adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha)","title":"add_color_picker"},{"location":"api_menu_controls/multi_selection_t/#add_keybind","text":"adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key)","title":"add_keybind"},{"location":"api_menu_controls/overview/","text":"button checkbox color_picker keybind list multi_selection selection slider text_input text Functions # Note all functions below work on any menu control get_name # returns the controls name string get_name() Example print ( control : get_name ())","title":"overview"},{"location":"api_menu_controls/overview/#functions","text":"Note all functions below work on any menu control","title":"Functions"},{"location":"api_menu_controls/overview/#get_name","text":"returns the controls name string get_name()","title":"get_name"},{"location":"api_menu_controls/selection_t/","text":"local selection = menu . add_selection ( \"group\" , \"name\" , { \"item1\" , \"item2\" , \"item3\" }) get # returns the current active item index int get() Example print ( selection : get ()) set # sets the active item index void set(<int> active_item_index) Example selection : set ( 1 ) -- set active item to \"item1\" get_item_name # returns the item name for the passed index string get_item_name(<int> item) Example print ( selection : get_item_name ( 1 )) -- prints \"item1\" get_items # returns an indexed table of all the items string[] get_items() Example local items = selection : get_items () print ( items [ 0 ], items [ 1 ]) -- prints \"item1\" and \"item2\" set_items # overrides the entire list of items void set_items(string[] items) Example selection : set_items ({ \"new item1\" , \"new item2\" }) add_item # adds an item to the list void add_item(string item) Example selection : add_item ( \"item4\" ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example selection : set_visible ( true ) add_color_picker # adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha) Example local colly = selection : add_color_picker ( \"bruh color\" ) add_keybind # adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key) Example local keybind = selection : add_keybind ( \"bruh key\" )","title":"selection_t"},{"location":"api_menu_controls/selection_t/#get","text":"returns the current active item index int get()","title":"get"},{"location":"api_menu_controls/selection_t/#set","text":"sets the active item index void set(<int> active_item_index)","title":"set"},{"location":"api_menu_controls/selection_t/#get_item_name","text":"returns the item name for the passed index string get_item_name(<int> item)","title":"get_item_name"},{"location":"api_menu_controls/selection_t/#get_items","text":"returns an indexed table of all the items string[] get_items()","title":"get_items"},{"location":"api_menu_controls/selection_t/#set_items","text":"overrides the entire list of items void set_items(string[] items)","title":"set_items"},{"location":"api_menu_controls/selection_t/#add_item","text":"adds an item to the list void add_item(string item)","title":"add_item"},{"location":"api_menu_controls/selection_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/selection_t/#add_color_picker","text":"adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha)","title":"add_color_picker"},{"location":"api_menu_controls/selection_t/#add_keybind","text":"adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key)","title":"add_keybind"},{"location":"api_menu_controls/slider_t/","text":"local slider = menu . add_slider ( \"group\" , \"slidy\" , 1 , 10 ) get # returns the current slider value float get() Example print ( slider : get ()) set # sets the current slider value void set(<float> value) Example slider : set ( 5.0 ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example slider : set_visible ( true ) add_color_picker # adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha) Example local colly = slider : add_color_picker ( \"bruh color\" ) add_keybind # adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key) Example local keybind = slider : add_keybind ( \"bruh key\" )","title":"slider_t"},{"location":"api_menu_controls/slider_t/#get","text":"returns the current slider value float get()","title":"get"},{"location":"api_menu_controls/slider_t/#set","text":"sets the current slider value void set(<float> value)","title":"set"},{"location":"api_menu_controls/slider_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/slider_t/#add_color_picker","text":"adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha)","title":"add_color_picker"},{"location":"api_menu_controls/slider_t/#add_keybind","text":"adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key)","title":"add_keybind"},{"location":"api_menu_controls/text_input_t/","text":"local text_input = menu . add_text_input ( \"group\" , \"name\" ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example text_input : set_visible ( true )","title":"text_input_t"},{"location":"api_menu_controls/text_input_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/text_t/","text":"local text = menu . add_text ( \"group\" , \"name\" ) set_visible # sets whether this control is visible void set_visible(<bool> is_visible) Example text : set_visible ( true ) add_color_picker # adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha) Example local colly = text : add_color_picker ( \"bruh color\" ) add_keybind # adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key) Example local keybind = text : add_keybind ( \"bruh key\" )","title":"text_t"},{"location":"api_menu_controls/text_t/#set_visible","text":"sets whether this control is visible void set_visible(<bool> is_visible)","title":"set_visible"},{"location":"api_menu_controls/text_t/#add_color_picker","text":"adds a color picker sub control color_picker_t add_color_picker(<string> name, [optional] <color_t> default_color, [optional] <bool> has_alpha)","title":"add_color_picker"},{"location":"api_menu_controls/text_t/#add_keybind","text":"adds a keybind sub control keybind_t add_keybind(<string> name, [optional] <int> default_key)","title":"add_keybind"},{"location":"api_types/aimbot_hit_t/","text":"Info aimbot hit can only be retrieved via the AIMBOT_HIT callback in all examples below shot is the aimbot shot local function on_aimbot_hit ( shot ) print ( \"shot at\" , shot . player : get_player ()) end callbacks . add ( e_callbacks . AIMBOT_HIT , on_aimbot_hit ) Fields # Field Description id int shot id player entity_t player entity the shot hit damage int the damage the shot did safepoint bool whether the final shot was safe backtrack_ticks int how many ticks were backtracked hitgroup e_hitgroups what hitgroup the shot hit aim_damage int the predicted damage that the aimbot thought this shot would do aim_hitchance int the chance this shot would hit the target aim_safepoint bool whether the aimbot shot was a safepoint aim_hitgroup e_hitgroups hitgroup aimed at aim_hitbox e_hitboxes hitbox aimed at","title":"aimbot_hit_t"},{"location":"api_types/aimbot_hit_t/#fields","text":"Field Description id int shot id player entity_t player entity the shot hit damage int the damage the shot did safepoint bool whether the final shot was safe backtrack_ticks int how many ticks were backtracked hitgroup e_hitgroups what hitgroup the shot hit aim_damage int the predicted damage that the aimbot thought this shot would do aim_hitchance int the chance this shot would hit the target aim_safepoint bool whether the aimbot shot was a safepoint aim_hitgroup e_hitgroups hitgroup aimed at aim_hitbox e_hitboxes hitbox aimed at","title":"Fields"},{"location":"api_types/aimbot_miss_t/","text":"Info aimbot miss can only be retrieved via the AIMBOT_MISS callback in all examples below shot is the aimbot miss local function on_aimbot_miss ( shot ) print ( \"missed\" , shot . player : get_player ()) end callbacks . add ( e_callbacks . AIMBOT_MISS , on_aimbot_miss ) Fields # Field Description id int shot id player entity_t player entity the shot hit reason_string string the reason why the shot missed backtrack_ticks int how many ticks were backtracked aim_damage int the predicted damage that the aimbot thought this shot would do aim_hitchance int the chance this shot would hit the target aim_safepoint bool whether the aimbot shot was a safepoint aim_hitgroup e_hitgroups hitgroup aimed at aim_hitbox e_hitboxes hitbox aimed at","title":"aimbot_miss_t"},{"location":"api_types/aimbot_miss_t/#fields","text":"Field Description id int shot id player entity_t player entity the shot hit reason_string string the reason why the shot missed backtrack_ticks int how many ticks were backtracked aim_damage int the predicted damage that the aimbot thought this shot would do aim_hitchance int the chance this shot would hit the target aim_safepoint bool whether the aimbot shot was a safepoint aim_hitgroup e_hitgroups hitgroup aimed at aim_hitbox e_hitboxes hitbox aimed at","title":"Fields"},{"location":"api_types/aimbot_shot_t/","text":"Info aimbot shot can only be retrieved via the AIMBOT_SHOOT callback in all examples below shot is the aimbot shot local function on_aimbot_shoot ( shot ) print ( \"shot at\" , shot . player : get_player ()) end callbacks . add ( e_callbacks . AIMBOT_SHOOT , on_antiaim ) Fields # Field Description id int shot id player entity_t player entity the aimbot shot at damage int the predicted damage the shot will hit for you hitchance int the chance that the shot will hit, depending on spread safepoint bool whether the final point was a safepoint hitbox e_hitboxes what hitbox the aimbot shot at hitgroup e_hitgroups hitgroup the aimbot shot at backtrack_ticks int how many ticks were backtracked extrapolated_ticks int how many ticks the aimbot extrapolated, -1 if not extrapolated shoot_pos vec3_t world coordinates of where we shot from hitpoint_pos vec3_t world coordinates of the point shot at","title":"aimbot_shot_t"},{"location":"api_types/aimbot_shot_t/#fields","text":"Field Description id int shot id player entity_t player entity the aimbot shot at damage int the predicted damage the shot will hit for you hitchance int the chance that the shot will hit, depending on spread safepoint bool whether the final point was a safepoint hitbox e_hitboxes what hitbox the aimbot shot at hitgroup e_hitgroups hitgroup the aimbot shot at backtrack_ticks int how many ticks were backtracked extrapolated_ticks int how many ticks the aimbot extrapolated, -1 if not extrapolated shoot_pos vec3_t world coordinates of where we shot from hitpoint_pos vec3_t world coordinates of the point shot at","title":"Fields"},{"location":"api_types/angle_t/","text":"local vec = angle_t ( 89 , 180 , 0 ) print ( vec ) Fields # Field Description x float y float z float Functions # TODO","title":"angle_t"},{"location":"api_types/angle_t/#fields","text":"Field Description x float y float z float","title":"Fields"},{"location":"api_types/angle_t/#functions","text":"TODO","title":"Functions"},{"location":"api_types/antiaim_context_t/","text":"Info antiaim context can only be retrieved via the ANTIAIM callback in all examples below ctx is the antiaim context function on_antiaim ( ctx ) ctx : set_yaw ( 180 ) end callbacks . add ( e_callbacks . ANTIAIM , on_antiaim ) Functions # set_pitch # overrides the pitch for the next antiaim call void set_pitch(<float> pitch) Example ctx : set_pitch ( 89 ) -- force down pitch Fields Description pitch float set_yaw # overrides the yaw for the next antiaim call void set_yaw(<float> yaw) Fields Description yaw float Example ctx : set_yaw ( 0 ) -- force forwards yaw set_desync # overrides the desync delta for the next antiaim call void set_desync(<float> desync_factor) Fields Description desync_factor float desync factor (range -1\u00b7\u00b7\u00b71) Example ctx : set_desync ( 1.0 ) -- force right desync set_body_lean # overrides the body lean delta for the next antiaim call void set_body_lean(<float> lean_factor, [optional] <bool> always_body_lean) Fields Description lean_factor float body lean factor (range -1\u00b7\u00b7\u00b71) always_body_lean bool [optional] always body leans Example ctx : set_body_lean ( 1.0 ) -- force right body lean set_render_pose # overrides the specified pose parameter for the next local animation update void set_render_pose(<e_poses> pose_index, <float> pose_value) Fields Description pose_index e_poses the pose parameter to override pose_value float the new pose parameter value Example ctx : set_render_pose ( e_poses . BODY_PITCH , 0.5 ) -- force visual pitch to 0 set_render_animlayer # overrides the specified animlayer for the next local animation update void set_render_animlayer(<e_animlayers> layer_index, [optional] <float> weight = -1.0, [optional] <float> cycle = -1.0) Fields Description layer_index e_animlayers the animlayer to override weight float the weight that will be applied to the animlayer, set to -1.0 if you dont want to override it cycle float the cycle that will be applied to the animlayer, set to -1.0 if you dont want to override it Example ctx : set_render_animlayer ( e_animlayers . MOVEMENT_MOVE , 0.0 , 0.0 ) -- remove all leg movement set_invert_desync # overrides the desync invert for the next antiaim call void set_invert_desync(<bool> invert) Fields Description invert float whether it should be inverted Example ctx : set_invert_desync ( true ) -- force invert set_invert_body_lean # overrides the desync invert for the next antiaim call void set_invert_body_lean(<bool> invert) Fields Description invert float whether it should be inverted Example ctx : set_invert_body_lean ( true ) -- force invert set_fakelag # overrides whether the current tick will be a choked tick or not void set_fakelag(<bool> should_lag) Fields Description should_lag float whether this tick will be choked Example ctx : set_fakelag ( true ) -- forces current tick to be choked -- or... ctx : set_fakelag ( false ) -- forces current tick to be sent","title":"antiaim_context_t"},{"location":"api_types/antiaim_context_t/#functions","text":"","title":"Functions"},{"location":"api_types/antiaim_context_t/#set_pitch","text":"overrides the pitch for the next antiaim call void set_pitch(<float> pitch)","title":"set_pitch"},{"location":"api_types/antiaim_context_t/#set_yaw","text":"overrides the yaw for the next antiaim call void set_yaw(<float> yaw) Fields Description yaw float","title":"set_yaw"},{"location":"api_types/antiaim_context_t/#set_desync","text":"overrides the desync delta for the next antiaim call void set_desync(<float> desync_factor) Fields Description desync_factor float desync factor (range -1\u00b7\u00b7\u00b71)","title":"set_desync"},{"location":"api_types/antiaim_context_t/#set_body_lean","text":"overrides the body lean delta for the next antiaim call void set_body_lean(<float> lean_factor, [optional] <bool> always_body_lean) Fields Description lean_factor float body lean factor (range -1\u00b7\u00b7\u00b71) always_body_lean bool [optional] always body leans","title":"set_body_lean"},{"location":"api_types/antiaim_context_t/#set_render_pose","text":"overrides the specified pose parameter for the next local animation update void set_render_pose(<e_poses> pose_index, <float> pose_value) Fields Description pose_index e_poses the pose parameter to override pose_value float the new pose parameter value","title":"set_render_pose"},{"location":"api_types/antiaim_context_t/#set_render_animlayer","text":"overrides the specified animlayer for the next local animation update void set_render_animlayer(<e_animlayers> layer_index, [optional] <float> weight = -1.0, [optional] <float> cycle = -1.0) Fields Description layer_index e_animlayers the animlayer to override weight float the weight that will be applied to the animlayer, set to -1.0 if you dont want to override it cycle float the cycle that will be applied to the animlayer, set to -1.0 if you dont want to override it","title":"set_render_animlayer"},{"location":"api_types/antiaim_context_t/#set_invert_desync","text":"overrides the desync invert for the next antiaim call void set_invert_desync(<bool> invert) Fields Description invert float whether it should be inverted","title":"set_invert_desync"},{"location":"api_types/antiaim_context_t/#set_invert_body_lean","text":"overrides the desync invert for the next antiaim call void set_invert_body_lean(<bool> invert) Fields Description invert float whether it should be inverted","title":"set_invert_body_lean"},{"location":"api_types/antiaim_context_t/#set_fakelag","text":"overrides whether the current tick will be a choked tick or not void set_fakelag(<bool> should_lag) Fields Description should_lag float whether this tick will be choked","title":"set_fakelag"},{"location":"api_types/bullet_data_t/","text":"Fields # Field Description valid bool whether the bullet trace hit a player. if false, only damage will be set damage entity_t entity object if hit any, nil otherwise hitgroup e_hitgroups hit hitgroup hitbox e_hitboxes hit hitbox pen_count int how many walls were penetrated before hitting the player hit_pos vec3_t world coordinate of where the player was hit hit_player entity_t player entity that was hit","title":"bullet_data_t"},{"location":"api_types/bullet_data_t/#fields","text":"Field Description valid bool whether the bullet trace hit a player. if false, only damage will be set damage entity_t entity object if hit any, nil otherwise hitgroup e_hitgroups hit hitgroup hitbox e_hitboxes hit hitbox pen_count int how many walls were penetrated before hitting the player hit_pos vec3_t world coordinate of where the player was hit hit_player entity_t player entity that was hit","title":"Fields"},{"location":"api_types/color_t/","text":"local col = color_t ( 255 , 0 , 0 , 255 ) print ( col ) -- if not supplying an alpha argument, it will default to 255 assert ( col == color_t ( 255 , 0 , 0 )) Fields # Field Description r int g int b int a int Functions # TODO","title":"color_t"},{"location":"api_types/color_t/#fields","text":"Field Description r int g int b int a int","title":"Fields"},{"location":"api_types/color_t/#functions","text":"TODO","title":"Functions"},{"location":"api_types/convar_t/","text":"local function on_paint () local skyname = cvars . sv_skyname print ( skyname : get_string ()) end callbacks . add ( e_callbacks . PAINT , on_paint ) Functions # get_int # retrieves the int value of the convar int get_int() Example print ( cvars . viewmodel_fov : get_int ()) get_float # retrieves the float value of the convar float get_float() Example print ( cvars . cl_crosshairsize : get_float ()) get_string # retrieves the string value of the convar string get_string() Example print ( cvars . sv_skyname : get_string ()) set_int # sets the int value of the convar void set_int(<int> value) Example cvars . viewmodel_fov : set_int ( 60 ) set_float # sets the float value of the convar void set_float(<float> value) Example cvars . cl_crosshairsize : set_float ( 2.5 ) set_string # sets the string value of the convar void set_string(<string> value) Example cvars . sv_skyname : set_string ( \"bing_bong_city\" )","title":"convar_t"},{"location":"api_types/convar_t/#functions","text":"","title":"Functions"},{"location":"api_types/convar_t/#get_int","text":"retrieves the int value of the convar int get_int()","title":"get_int"},{"location":"api_types/convar_t/#get_float","text":"retrieves the float value of the convar float get_float()","title":"get_float"},{"location":"api_types/convar_t/#get_string","text":"retrieves the string value of the convar string get_string()","title":"get_string"},{"location":"api_types/convar_t/#set_int","text":"sets the int value of the convar void set_int(<int> value)","title":"set_int"},{"location":"api_types/convar_t/#set_float","text":"sets the float value of the convar void set_float(<float> value)","title":"set_float"},{"location":"api_types/convar_t/#set_string","text":"sets the string value of the convar void set_string(<string> value)","title":"set_string"},{"location":"api_types/entity_t/","text":"local local_player = entity_list . get_local_player () if local_player ~= nil then print ( local_player : get_prop ( \"m_iHealth\" ))) end Info In all examples below, ent is an instance of entity_t general Functions # Info Functions in this group can be called on all types of entities get_address # returns the entity address for ease of use in ffi.* functions uint get_address() Example print ( ent : get_address ()) get_class_name # returns the entity class name (i.e. \"CCSPlayer\") string get_class_name() Example print ( ent : get_class_name ()) get_class_id # returns the entity class id int get_class_id() Example print ( ent : get_class_id ()) get_steamids # returns the entitiy steamID3 as a number and steamID64 as a string int, string get_steamids() Example local steamID3 , steamID64 = ent : get_steamids () print ( steamID3 , steamID64 ) get_prop # returns specified entity prop any get_prop(<string> prop_name, [optional] <int> array_index) Fields Description prop_name string networked prop name array_index int [optional] array index to use if the prop is an array Example print ( ent : get_prop ( \"m_iHealth\" )) set_prop # sets a specified entity prop void set_prop(<string> prop_name, <any> value, [optional] <int> array_index) Fields Description prop_name string networked prop name value any value to set the prop to array_index any [optional] array index to use if the prop is an array Example ent : set_prop ( \"m_iHealth\" , 10000 ) get_render_origin # returns the render origin vec3_t get_render_origin() Example print ( ent : get_render_origin ()) get_render_angles # returns the render angles angle_t get_render_angles() Example print ( ent : get_render_angles ()) is_dormant # if true, new information about this player isnt being networked right now bool is_dormant() Example print ( pl : is_dormant ()) is_player # checks whether the entity is a player bool is_player() Example print ( ent : is_player ()) is_weapon # checks whether the entity is a weapon bool is_weapon() Example print ( ent : is_weapon ()) get_name # - for players: returns their name; - for weapons: returns the weapon name - for other entities: returns the class name string get_name() Example print ( ent : get_name ()) get_index # returns the entity index int get_index() Example print ( ent : get_index ()) get_bounds # returns the relative mins/maxs of the entity vec3_t, vec3_t get_bounds() Example print ( unpack ( ent : get_bounds ())) player functions # Warning Functions in this group can be called only on players In the following examples pl is a player entity has_player_flag # checks whether the specified player flag is set bool has_player_flag(<e_player_flags> flag) Example print ( pl : has_player_flag ( e_player_flags . ON_GROUND )) get_active_weapon # returns the current weapon as an entity object or nil on failure entity_t get_active_weapon() Example print ( pl : get_active_weapon (): get_name ()) is_alive # is breathe? bool is_alive() Example print ( pl : is_alive ()) get_eye_position # returns the world coordinates of where your shots come from vec3_t get_eye_position() Example print ( pl : get_eye_position ()) is_point_visible # checks if a specified world coordinate is visible bool is_point_visible(<vec3_t> world_coordinate) Example print ( pl : is_point_visible ( vec3_t ( 100 , 100 , 100 ))) get_hitbox_pos # HITBOX POS!!!!!!! vec3_t get_hitbox_pos(<e_hitboxes> hitbox_id) Example print ( pl : get_hitbox_pos ( e_hitboxes . HEAD )) is_enemy # what do u think bool is_enemy() Example print ( pl : is_enemy ()) weapon functions # Warning Functions in this group can be called only on weapons In the following examples wep is a weapon entity get_weapon_spread # gets the current weapon spread float get_weapon_spread() Example print ( wep : get_weapon_spread ()) get_weapon_inaccuracy # gets the current weapon inaccuracy float get_weapon_inaccuracy() Example print ( wep : get_weapon_inaccuracy ()) get_weapon_data # gets the current weapon data weapon_data_t get_weapon_data() Example print ( wep : get_weapon_data (). console_name )","title":"entity_t"},{"location":"api_types/entity_t/#general-functions","text":"Info Functions in this group can be called on all types of entities","title":"general Functions"},{"location":"api_types/entity_t/#get_address","text":"returns the entity address for ease of use in ffi.* functions uint get_address()","title":"get_address"},{"location":"api_types/entity_t/#get_class_name","text":"returns the entity class name (i.e. \"CCSPlayer\") string get_class_name()","title":"get_class_name"},{"location":"api_types/entity_t/#get_class_id","text":"returns the entity class id int get_class_id()","title":"get_class_id"},{"location":"api_types/entity_t/#get_steamids","text":"returns the entitiy steamID3 as a number and steamID64 as a string int, string get_steamids()","title":"get_steamids"},{"location":"api_types/entity_t/#get_prop","text":"returns specified entity prop any get_prop(<string> prop_name, [optional] <int> array_index) Fields Description prop_name string networked prop name array_index int [optional] array index to use if the prop is an array","title":"get_prop"},{"location":"api_types/entity_t/#set_prop","text":"sets a specified entity prop void set_prop(<string> prop_name, <any> value, [optional] <int> array_index) Fields Description prop_name string networked prop name value any value to set the prop to array_index any [optional] array index to use if the prop is an array","title":"set_prop"},{"location":"api_types/entity_t/#get_render_origin","text":"returns the render origin vec3_t get_render_origin()","title":"get_render_origin"},{"location":"api_types/entity_t/#get_render_angles","text":"returns the render angles angle_t get_render_angles()","title":"get_render_angles"},{"location":"api_types/entity_t/#is_dormant","text":"if true, new information about this player isnt being networked right now bool is_dormant()","title":"is_dormant"},{"location":"api_types/entity_t/#is_player","text":"checks whether the entity is a player bool is_player()","title":"is_player"},{"location":"api_types/entity_t/#is_weapon","text":"checks whether the entity is a weapon bool is_weapon()","title":"is_weapon"},{"location":"api_types/entity_t/#get_name","text":"- for players: returns their name; - for weapons: returns the weapon name - for other entities: returns the class name string get_name()","title":"get_name"},{"location":"api_types/entity_t/#get_index","text":"returns the entity index int get_index()","title":"get_index"},{"location":"api_types/entity_t/#get_bounds","text":"returns the relative mins/maxs of the entity vec3_t, vec3_t get_bounds()","title":"get_bounds"},{"location":"api_types/entity_t/#player-functions","text":"Warning Functions in this group can be called only on players In the following examples pl is a player entity","title":"player functions"},{"location":"api_types/entity_t/#has_player_flag","text":"checks whether the specified player flag is set bool has_player_flag(<e_player_flags> flag)","title":"has_player_flag"},{"location":"api_types/entity_t/#get_active_weapon","text":"returns the current weapon as an entity object or nil on failure entity_t get_active_weapon()","title":"get_active_weapon"},{"location":"api_types/entity_t/#is_alive","text":"is breathe? bool is_alive()","title":"is_alive"},{"location":"api_types/entity_t/#get_eye_position","text":"returns the world coordinates of where your shots come from vec3_t get_eye_position()","title":"get_eye_position"},{"location":"api_types/entity_t/#is_point_visible","text":"checks if a specified world coordinate is visible bool is_point_visible(<vec3_t> world_coordinate)","title":"is_point_visible"},{"location":"api_types/entity_t/#get_hitbox_pos","text":"HITBOX POS!!!!!!! vec3_t get_hitbox_pos(<e_hitboxes> hitbox_id)","title":"get_hitbox_pos"},{"location":"api_types/entity_t/#is_enemy","text":"what do u think bool is_enemy()","title":"is_enemy"},{"location":"api_types/entity_t/#weapon-functions","text":"Warning Functions in this group can be called only on weapons In the following examples wep is a weapon entity","title":"weapon functions"},{"location":"api_types/entity_t/#get_weapon_spread","text":"gets the current weapon spread float get_weapon_spread()","title":"get_weapon_spread"},{"location":"api_types/entity_t/#get_weapon_inaccuracy","text":"gets the current weapon inaccuracy float get_weapon_inaccuracy()","title":"get_weapon_inaccuracy"},{"location":"api_types/entity_t/#get_weapon_data","text":"gets the current weapon data weapon_data_t get_weapon_data()","title":"get_weapon_data"},{"location":"api_types/enum_callback/","text":"e_callbacks # e_callbacks Types PAINT EVENT --Callbacks Example local function callback_paint () print ( \"on paint callback\" ) end callbacks . add ( e_callbacks . PAINT , callback_paint )","title":"e_callbacks"},{"location":"api_types/enum_callback/#e_callbacks","text":"e_callbacks Types PAINT EVENT --Callbacks Example local function callback_paint () print ( \"on paint callback\" ) end callbacks . add ( e_callbacks . PAINT , callback_paint )","title":"e_callbacks"},{"location":"api_types/font_t/","text":"local font = render . create_font ( \"Arial\" , 12 , 400 ) print ( font . height ) Fields # Field Description handle int internal handle to the font object height int height of the font in pixels","title":"font_t"},{"location":"api_types/font_t/#fields","text":"Field Description handle int internal handle to the font object height int height of the font in pixels","title":"Fields"},{"location":"api_types/hitscan_context_t/","text":"Info hitscan context can only be retrieved via the HITSCAN callback in all examples below ctx is the hitscan context local function on_hitscan ( ctx , cmd , unpredicted_data ) ctx : set_min_dmg ( 100 ) -- force 100 min dmg end callbacks . add ( e_callbacks . HITSCAN , on_hitscan ) Fields # Field Description player entity_t player entity that is being scanned right now health entity_t predicted health of the player Functions # set_min_dmg # forces min dmg for either all hitscan groups or only a specific one void set_min_dmg(<float> min_dmg, [optional] <e_hitscan_groups> hitscan_group) Example ctx : set_min_dmg ( 50 ) -- force min dmg to 50 for all hitscan groups -- or... ctx : set_min_dmg ( 50 , e_hitscan_groups . HEAD ) -- force min dmg to 50 only for HEAD set_hitchance # forces hitchance for either all hitscan groups or only a specific one void set_hitchance(<float> hitchance, [optional] <e_hitscan_groups> hitscan_group) Example ctx : set_hitchance ( 50 ) -- force hitchance to 50% for all hitscan groups -- or... ctx : set_hitchance ( 50 , e_hitscan_groups . HEAD ) -- force hitchance to 50% only for HEAD set_damage_accuracy # forces damage accuracy for either all hitscan groups or only a specific one void set_damage_accuracy(<float> damage_accuracy, [optional] <e_hitscan_groups> hitscan_group) Example ctx : set_damage_accuracy ( 50 ) -- force damage accuracy to 50% for all hitscan groups -- or... ctx : set_damage_accuracy ( 50 , e_hitscan_groups . HEAD ) -- force damage accuracy to 50% only for HEAD set_safepoint_state # forces safepoint state for either all hitscan groups or only a specific one void set_safepoint_state(<bool> should_force_safepoint, [optional] <e_hitscan_groups> hitscan_group) Example ctx : set_safepoint_state ( true ) -- force safepoint for all hitscan groups -- or... ctx : set_safepoint_state ( true , e_hitscan_groups . HEAD ) -- force safepoint only for HEAD set_hitscan_group_state # determine whether a hitscan group be scanned and multipointed Warning forcing a hitscan group to be scanned without definining whether it should be multipointed will turn off multipoints by default void set_hitscan_group_state(<e_hitscan_groups> hitscan_group, <bool> should_scan, [optional] <bool> should_multipoint) Example -- force head to not be scanned ctx : set_hitscan_group_state ( e_hitscan_groups . HEAD , false ) -- force stomach to be scanned and multipointed ctx : set_hitscan_group_state ( e_hitscan_groups . STOMACH , true , true )","title":"hitscan_context_t"},{"location":"api_types/hitscan_context_t/#fields","text":"Field Description player entity_t player entity that is being scanned right now health entity_t predicted health of the player","title":"Fields"},{"location":"api_types/hitscan_context_t/#functions","text":"","title":"Functions"},{"location":"api_types/hitscan_context_t/#set_min_dmg","text":"forces min dmg for either all hitscan groups or only a specific one void set_min_dmg(<float> min_dmg, [optional] <e_hitscan_groups> hitscan_group)","title":"set_min_dmg"},{"location":"api_types/hitscan_context_t/#set_hitchance","text":"forces hitchance for either all hitscan groups or only a specific one void set_hitchance(<float> hitchance, [optional] <e_hitscan_groups> hitscan_group)","title":"set_hitchance"},{"location":"api_types/hitscan_context_t/#set_damage_accuracy","text":"forces damage accuracy for either all hitscan groups or only a specific one void set_damage_accuracy(<float> damage_accuracy, [optional] <e_hitscan_groups> hitscan_group)","title":"set_damage_accuracy"},{"location":"api_types/hitscan_context_t/#set_safepoint_state","text":"forces safepoint state for either all hitscan groups or only a specific one void set_safepoint_state(<bool> should_force_safepoint, [optional] <e_hitscan_groups> hitscan_group)","title":"set_safepoint_state"},{"location":"api_types/hitscan_context_t/#set_hitscan_group_state","text":"determine whether a hitscan group be scanned and multipointed Warning forcing a hitscan group to be scanned without definining whether it should be multipointed will turn off multipoints by default void set_hitscan_group_state(<e_hitscan_groups> hitscan_group, <bool> should_scan, [optional] <bool> should_multipoint)","title":"set_hitscan_group_state"},{"location":"api_types/material_t/","text":"Info in all examples below mat is an instance of material_t Functions # get_name # gets the material name string get_name() Example print ( mat : get_name ()) get_texture_group_name # gets the material group name string get_texture_group_name() Example print ( mat : get_texture_group_name ()) alpha_modulate # modulates the current materials alpha property void alpha_modulate(<float> alpha_factor) Example print ( mat : alpha_modulate ( 0.5 )) -- force 50% alpha color_modulate # modulates the current materials color property void color_modulate(<float> red_factor,<float> green_factor, <float> blue_factor) Example print ( mat : color_modulate ( 1.0 , 0.0 , 0.0 )) -- force red tint get_flag # checks whether this material has the flag active bool get_flag(<e_material_flags> flag) Example print ( mat : get_flag ( e_material_flags . IGNOREZ )) set_flag # activates the flag for the material void set_flag(<e_material_flags> flag, bool value) Example mat : set_flag ( e_material_flags . IGNOREZ , true ) get_address # gets raw address of material pointer uint get_address() set_shader_param # sets shader param to either an int, string, float or vec3_t void set_shader_param(<string> param_name, <int/float/vec3_t/string> val) get_shader_param # returns shader param as either an int, string, float or vec3_t int/float/vec3_t/string get_shader_param(<string> param_name)","title":"material_t"},{"location":"api_types/material_t/#functions","text":"","title":"Functions"},{"location":"api_types/material_t/#get_name","text":"gets the material name string get_name()","title":"get_name"},{"location":"api_types/material_t/#get_texture_group_name","text":"gets the material group name string get_texture_group_name()","title":"get_texture_group_name"},{"location":"api_types/material_t/#alpha_modulate","text":"modulates the current materials alpha property void alpha_modulate(<float> alpha_factor)","title":"alpha_modulate"},{"location":"api_types/material_t/#color_modulate","text":"modulates the current materials color property void color_modulate(<float> red_factor,<float> green_factor, <float> blue_factor)","title":"color_modulate"},{"location":"api_types/material_t/#get_flag","text":"checks whether this material has the flag active bool get_flag(<e_material_flags> flag)","title":"get_flag"},{"location":"api_types/material_t/#set_flag","text":"activates the flag for the material void set_flag(<e_material_flags> flag, bool value)","title":"set_flag"},{"location":"api_types/material_t/#get_address","text":"gets raw address of material pointer uint get_address()","title":"get_address"},{"location":"api_types/material_t/#set_shader_param","text":"sets shader param to either an int, string, float or vec3_t void set_shader_param(<string> param_name, <int/float/vec3_t/string> val)","title":"set_shader_param"},{"location":"api_types/material_t/#get_shader_param","text":"returns shader param as either an int, string, float or vec3_t int/float/vec3_t/string get_shader_param(<string> param_name)","title":"get_shader_param"},{"location":"api_types/model_context_t/","text":"Info model context can only be retrieved via the DRAW_MODEL callback in all examples below ctx is the player esp context local function on_draw_model ( ctx ) if ctx . entity == nil then return end -- prevent all models from drawing ctx . override_original = true end callbacks . add ( e_callbacks . DRAW_MODEL , on_draw_model ) Fields # Field Description entity entity_t entity that is being rendered right now, can be nil model_name string model name override_original bool prevents the original model code from running Functions # draw_material # draws the model with the specified material void draw_material(<material_t> material, [optional] <color_t> color) draw_original # draws the model with the original material void draw_original([optional] <color_t> color)","title":"model_context_t"},{"location":"api_types/model_context_t/#fields","text":"Field Description entity entity_t entity that is being rendered right now, can be nil model_name string model name override_original bool prevents the original model code from running","title":"Fields"},{"location":"api_types/model_context_t/#functions","text":"","title":"Functions"},{"location":"api_types/model_context_t/#draw_material","text":"draws the model with the specified material void draw_material(<material_t> material, [optional] <color_t> color)","title":"draw_material"},{"location":"api_types/model_context_t/#draw_original","text":"draws the model with the original material void draw_original([optional] <color_t> color)","title":"draw_original"},{"location":"api_types/player_esp_context_t/","text":"Info player esp context can only be retrieved via the PLAYER_ESP callback in all examples below ctx is the player esp context local function on_player_esp ( ctx ) if ctx . dormant then return end ctx : add_flag ( \"FLAG\" ) ctx : add_flag ( \"COLOR FLAG\" , color_t ( 255 , 0 , 0 )) end callbacks . add ( e_callbacks . PLAYER_ESP , on_player_esp ) Fields # Field Description player entity_t player entity that is being rendered right now alpha_modifier float alpha multiplier of the esp (range 0\u00b7\u00b7\u00b71) dormant bool whether new information about this player isnt being networked right now render_origin e_hitboxes world coordinates of the player bbox_start e_hitboxes 2d coordinates of the esp bbox bbox_size e_hitboxes 2d size of the esp bbox mode int team mode of this player; 1 = enemy, 0 = friendly Functions # add_flag # adds a flag to the right side of the player if no color is supplied, it will use the default flags color void add_flag(<string> flag_name, [optional] <color_t> color) Example ctx : add_flag ( \"FLAG\" ) ctx : add_flag ( \"COLOR FLAG\" , color_t ( 255 , 0 , 0 )) set_font # overrides the main font for this player void set_font(<font_t> font) Example ctx : set_font ( font ) set_small_font # overrides the small font for this player (e.g. used for flags) void set_small_font(<font_t> font) Example ctx : set_small_font ( font )","title":"player_esp_context_t"},{"location":"api_types/player_esp_context_t/#fields","text":"Field Description player entity_t player entity that is being rendered right now alpha_modifier float alpha multiplier of the esp (range 0\u00b7\u00b7\u00b71) dormant bool whether new information about this player isnt being networked right now render_origin e_hitboxes world coordinates of the player bbox_start e_hitboxes 2d coordinates of the esp bbox bbox_size e_hitboxes 2d size of the esp bbox mode int team mode of this player; 1 = enemy, 0 = friendly","title":"Fields"},{"location":"api_types/player_esp_context_t/#functions","text":"","title":"Functions"},{"location":"api_types/player_esp_context_t/#add_flag","text":"adds a flag to the right side of the player if no color is supplied, it will use the default flags color void add_flag(<string> flag_name, [optional] <color_t> color)","title":"add_flag"},{"location":"api_types/player_esp_context_t/#set_font","text":"overrides the main font for this player void set_font(<font_t> font)","title":"set_font"},{"location":"api_types/player_esp_context_t/#set_small_font","text":"overrides the small font for this player (e.g. used for flags) void set_small_font(<font_t> font)","title":"set_small_font"},{"location":"api_types/target_selection_context_t/","text":"Info target selection context can only be retrieved via the TARGET_SELECTION callback in all examples below ctx is the target selection context local function on_target_selection ( ctx , cmd , unpredicted_data ) ctx : ignore_target ( 2 ) -- ignore target with index 2 end callbacks . add ( e_callbacks . TARGET_SELECTION , on_target_selection ) Functions # prioritize_target # prioritize the desired target with an arbitrary score void prioritize_target(<int> player_index, [optional] <int> priority_value = 100) Example ctx : prioritize_target ( player : get_index (), 500 ) force_target # forces the target selection to scan the desired target Warning if you force an invalid target the aimbot will not shoot at all, consider using prioritize_target instead void force_target(<int> player_index) Example ctx : force_target ( player : get_index ()) ignore_target # forces the target selection to ignore the desired target void ignore_target(<int> player_index) Example ctx : ignore_target ( player : get_index ())","title":"target_selection_context_t"},{"location":"api_types/target_selection_context_t/#functions","text":"","title":"Functions"},{"location":"api_types/target_selection_context_t/#prioritize_target","text":"prioritize the desired target with an arbitrary score void prioritize_target(<int> player_index, [optional] <int> priority_value = 100)","title":"prioritize_target"},{"location":"api_types/target_selection_context_t/#force_target","text":"forces the target selection to scan the desired target Warning if you force an invalid target the aimbot will not shoot at all, consider using prioritize_target instead void force_target(<int> player_index)","title":"force_target"},{"location":"api_types/target_selection_context_t/#ignore_target","text":"forces the target selection to ignore the desired target void ignore_target(<int> player_index)","title":"ignore_target"},{"location":"api_types/texture_t/","text":"Fields # Field Description id int internal id of the texture, used for render.texture size size original size of the texture","title":"texture_t"},{"location":"api_types/texture_t/#fields","text":"Field Description id int internal id of the texture, used for render.texture size size original size of the texture","title":"Fields"},{"location":"api_types/trace_result_t/","text":"Fields # Field Description fraction float how far the trace traveled before hitting the desired target (range 0\u00b7\u00b7\u00b71) entity entity_t entity object if hit any, nil otherwise hitgroup e_hitgroups hit hitgroup if hit a player hitbox e_hitboxes hit hitbox if hit a player","title":"trace_result_t"},{"location":"api_types/trace_result_t/#fields","text":"Field Description fraction float how far the trace traveled before hitting the desired target (range 0\u00b7\u00b7\u00b71) entity entity_t entity object if hit any, nil otherwise hitgroup e_hitgroups hit hitgroup if hit a player hitbox e_hitboxes hit hitbox if hit a player","title":"Fields"},{"location":"api_types/unpredicted_data_t/","text":"unpredicted_data_t holds data on the player state before input prediction was run Fields # Field Description origin vec3_t [read-only] velocity vec3_t [read-only] move vec3_t [read-only] Functions # has_button # checks if a cmd button was pressed bool has_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons Example local shooting = unpredicted_data : has_button ( e_cmd_buttons . ATTACK ) has_player_flag # checks if a player flag was set bool has_player_flag(<e_player_flags> flag) Fields Description flag e_player_flags Example local was_on_ground = unpredicted_data : has_player_flag ( e_player_flags . ON_GROUND )","title":"unpredicted_data_t"},{"location":"api_types/unpredicted_data_t/#fields","text":"Field Description origin vec3_t [read-only] velocity vec3_t [read-only] move vec3_t [read-only]","title":"Fields"},{"location":"api_types/unpredicted_data_t/#functions","text":"","title":"Functions"},{"location":"api_types/unpredicted_data_t/#has_button","text":"checks if a cmd button was pressed bool has_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons","title":"has_button"},{"location":"api_types/unpredicted_data_t/#has_player_flag","text":"checks if a player flag was set bool has_player_flag(<e_player_flags> flag) Fields Description flag e_player_flags","title":"has_player_flag"},{"location":"api_types/user_cmd_t/","text":"function on_setup_command ( cmd ) print ( cmd . tick_count ) print ( cmd . viewangles ) end callbacks . add ( e_callbacks . SETUP_COMMAND , on_setup_command ) Fields # Field Description command_number int [read-only] tick_count int [read-only] the tick this client was created viewangles angle_t aim_direction vec3_t move vec3_t movement direction (x = forwardmove, y = sidemove, z = upmove) impulse int weaponselect int entity index of weapon to switch to weaponsubtype int random_seed int mousedx int mousedy int hasbeenpredicted int [read-only] head_angles angle_t head_offset vec3_t Functions # has_button # checks if a cmd button is pressed bool has_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons Example local shooting = cmd : has_button ( e_cmd_buttons . ATTACK ) add_button # add a cmd button void add_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons Example cmd : add_button ( e_cmd_buttons . ATTACK ) // force shooting remove_button # removes a cmd button void remove_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons Example cmd : remove_button ( e_cmd_buttons . ATTACK ) // prevent shooting clear_buttons # removes all cmd buttons void clear_buttons() Example cmd : clear_buttons () -- goobye","title":"user_cmd_t"},{"location":"api_types/user_cmd_t/#fields","text":"Field Description command_number int [read-only] tick_count int [read-only] the tick this client was created viewangles angle_t aim_direction vec3_t move vec3_t movement direction (x = forwardmove, y = sidemove, z = upmove) impulse int weaponselect int entity index of weapon to switch to weaponsubtype int random_seed int mousedx int mousedy int hasbeenpredicted int [read-only] head_angles angle_t head_offset vec3_t","title":"Fields"},{"location":"api_types/user_cmd_t/#functions","text":"","title":"Functions"},{"location":"api_types/user_cmd_t/#has_button","text":"checks if a cmd button is pressed bool has_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons","title":"has_button"},{"location":"api_types/user_cmd_t/#add_button","text":"add a cmd button void add_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons","title":"add_button"},{"location":"api_types/user_cmd_t/#remove_button","text":"removes a cmd button void remove_button(<e_cmd_buttons> cmd_button) Fields Description cmd_button e_cmd_buttons","title":"remove_button"},{"location":"api_types/user_cmd_t/#clear_buttons","text":"removes all cmd buttons void clear_buttons()","title":"clear_buttons"},{"location":"api_types/vec2_t/","text":"local vec = vec2_t ( 100 , 100 ) print ( vec ) Fields # Field Description x float y float Functions # TODO","title":"vec2_t"},{"location":"api_types/vec2_t/#fields","text":"Field Description x float y float","title":"Fields"},{"location":"api_types/vec2_t/#functions","text":"TODO","title":"Functions"},{"location":"api_types/vec3_t/","text":"local vec = vec3_t ( 100 , 100 , 100 ) print ( vec ) Fields # Field Description x float y float z float Functions # TODO","title":"vec3_t"},{"location":"api_types/vec3_t/#fields","text":"Field Description x float y float z float","title":"Fields"},{"location":"api_types/vec3_t/#functions","text":"TODO","title":"Functions"},{"location":"api_types/weapon_data_t/","text":"Fields # Field Description console_name string [read-only] max_clip int [read-only] world_model string [read-only] view_model string [read-only] world_model_dropped string [read-only] name string [read-only] inventory_slot int [read-only] inventory_slot_position int [read-only] type e_weapon_types [read-only] cycle_time float [read-only] is_full_auto bool [read-only] damage float [read-only] armor_ratio float [read-only] bullets int [read-only] penetration float [read-only] range float [read-only] range_modifier float [read-only] throw_velocity float [read-only] has_silencer bool [read-only] max_speed float [read-only] zoom_levels int [read-only] has_burst_mode bool [read-only]","title":"weapon_data_t"},{"location":"api_types/weapon_data_t/#fields","text":"Field Description console_name string [read-only] max_clip int [read-only] world_model string [read-only] view_model string [read-only] world_model_dropped string [read-only] name string [read-only] inventory_slot int [read-only] inventory_slot_position int [read-only] type e_weapon_types [read-only] cycle_time float [read-only] is_full_auto bool [read-only] damage float [read-only] armor_ratio float [read-only] bullets int [read-only] penetration float [read-only] range float [read-only] range_modifier float [read-only] throw_velocity float [read-only] has_silencer bool [read-only] max_speed float [read-only] zoom_levels int [read-only] has_burst_mode bool [read-only]","title":"Fields"},{"location":"examples/iterating_enemies/","text":"local function on_paint () -- get a table of enemies only local enemies_only = entity_list . get_players ( true ) -- iterate through the enemies table for _ , enemy in pairs ( enemies_only ) do -- check if they are alive if enemy : is_alive () then print ( \"enemy name\" , enemy : get_name ()) -- print their name end end end callbacks . add ( e_callbacks . PAINT , on_paint ) -- run on paint callback","title":"Iterating Enemies"}]}